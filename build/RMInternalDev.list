
build/RMInternalDev.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023a 	.word	0x0800023a
 8000010:	0800023a 	.word	0x0800023a
 8000014:	0800023a 	.word	0x0800023a
 8000018:	0800023a 	.word	0x0800023a
 800001c:	0800023a 	.word	0x0800023a
 8000020:	0800023a 	.word	0x0800023a
 8000024:	0800023a 	.word	0x0800023a
 8000028:	0800023a 	.word	0x0800023a
 800002c:	08002ba1 	.word	0x08002ba1
 8000030:	0800023a 	.word	0x0800023a
 8000034:	0800023a 	.word	0x0800023a
 8000038:	0800023a 	.word	0x0800023a
 800003c:	0800023a 	.word	0x0800023a
 8000040:	0800023a 	.word	0x0800023a
 8000044:	0800023a 	.word	0x0800023a
 8000048:	0800023a 	.word	0x0800023a
 800004c:	0800023a 	.word	0x0800023a
 8000050:	0800023a 	.word	0x0800023a
 8000054:	0800023a 	.word	0x0800023a
 8000058:	0800023a 	.word	0x0800023a
 800005c:	0800023a 	.word	0x0800023a
 8000060:	0800023a 	.word	0x0800023a
 8000064:	0800023a 	.word	0x0800023a
 8000068:	0800023a 	.word	0x0800023a
 800006c:	08001ab1 	.word	0x08001ab1
 8000070:	08001af1 	.word	0x08001af1
 8000074:	08001b31 	.word	0x08001b31
 8000078:	08001b71 	.word	0x08001b71
 800007c:	08001bb1 	.word	0x08001bb1
 8000080:	08001bf1 	.word	0x08001bf1
 8000084:	08001c31 	.word	0x08001c31
 8000088:	0800023a 	.word	0x0800023a
 800008c:	080016a1 	.word	0x080016a1
 8000090:	08001711 	.word	0x08001711
 8000094:	08001781 	.word	0x08001781
 8000098:	080017f1 	.word	0x080017f1
 800009c:	0800023a 	.word	0x0800023a
 80000a0:	0800023a 	.word	0x0800023a
 80000a4:	0800023a 	.word	0x0800023a
 80000a8:	0800023a 	.word	0x0800023a
 80000ac:	0800023a 	.word	0x0800023a
 80000b0:	08001e31 	.word	0x08001e31
 80000b4:	0800023a 	.word	0x0800023a
 80000b8:	0800023a 	.word	0x0800023a
 80000bc:	0800023a 	.word	0x0800023a
 80000c0:	0800023a 	.word	0x0800023a
 80000c4:	0800023a 	.word	0x0800023a
 80000c8:	0800023a 	.word	0x0800023a
 80000cc:	0800023a 	.word	0x0800023a
 80000d0:	0800023a 	.word	0x0800023a
 80000d4:	0800023a 	.word	0x0800023a
 80000d8:	08001fc1 	.word	0x08001fc1
 80000dc:	0800023a 	.word	0x0800023a
 80000e0:	0800023a 	.word	0x0800023a
 80000e4:	0800023a 	.word	0x0800023a
 80000e8:	0800023a 	.word	0x0800023a
 80000ec:	0800023a 	.word	0x0800023a
 80000f0:	0800023a 	.word	0x0800023a
 80000f4:	0800023a 	.word	0x0800023a
 80000f8:	0800023a 	.word	0x0800023a
 80000fc:	0800023a 	.word	0x0800023a
 8000100:	0800023a 	.word	0x0800023a
 8000104:	0800023a 	.word	0x0800023a
 8000108:	0800023a 	.word	0x0800023a
 800010c:	0800023a 	.word	0x0800023a
 8000110:	0800023a 	.word	0x0800023a
 8000114:	0800023a 	.word	0x0800023a
 8000118:	0800023a 	.word	0x0800023a
 800011c:	0800023a 	.word	0x0800023a
 8000120:	0800023a 	.word	0x0800023a
 8000124:	0800023a 	.word	0x0800023a
 8000128:	0800023a 	.word	0x0800023a
 800012c:	0800023a 	.word	0x0800023a
 8000130:	0800023a 	.word	0x0800023a
 8000134:	0800023a 	.word	0x0800023a
 8000138:	0800023a 	.word	0x0800023a
 800013c:	0800023a 	.word	0x0800023a
 8000140:	0800023a 	.word	0x0800023a
 8000144:	0800023a 	.word	0x0800023a
 8000148:	0800023a 	.word	0x0800023a
 800014c:	0800023a 	.word	0x0800023a
 8000150:	0800023a 	.word	0x0800023a
 8000154:	0800023a 	.word	0x0800023a
 8000158:	0800023a 	.word	0x0800023a
 800015c:	0800023a 	.word	0x0800023a

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f000 ffec 	bl	8001160 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 f822 	bl	80021d0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f000 ffde 	bl	8001190 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f000 ffcc 	bl	8001170 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f002 fd7a 	bl	8002ce0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f000 bfc0 	b.w	8001180 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000214:	080035f0 	.word	0x080035f0
                ldr     r2, =_data_start
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800021c:	20000824 	.word	0x20000824
                ldr     r1, =_bss_start
 8000220:	20000828 	.word	0x20000828
                ldr     r2, =_bss_end
 8000224:	20001400 	.word	0x20001400
                ldr     r4, =__init_array_start
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_start
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f002 fb08 	bl	8002870 <chThdExit>

08000260 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000260:	f002 fa26 	bl	80026b0 <chSchDoReschedule>

08000264 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000264:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000266:	e7fe      	b.n	8000266 <_port_exit_from_isr+0x2>

08000268 <__aeabi_drsub>:
 8000268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800026c:	e002      	b.n	8000274 <__adddf3>
 800026e:	bf00      	nop

08000270 <__aeabi_dsub>:
 8000270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000274 <__adddf3>:
 8000274:	b530      	push	{r4, r5, lr}
 8000276:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800027a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027e:	ea94 0f05 	teq	r4, r5
 8000282:	bf08      	it	eq
 8000284:	ea90 0f02 	teqeq	r0, r2
 8000288:	bf1f      	itttt	ne
 800028a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800029a:	f000 80e2 	beq.w	8000462 <__adddf3+0x1ee>
 800029e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a6:	bfb8      	it	lt
 80002a8:	426d      	neglt	r5, r5
 80002aa:	dd0c      	ble.n	80002c6 <__adddf3+0x52>
 80002ac:	442c      	add	r4, r5
 80002ae:	ea80 0202 	eor.w	r2, r0, r2
 80002b2:	ea81 0303 	eor.w	r3, r1, r3
 80002b6:	ea82 0000 	eor.w	r0, r2, r0
 80002ba:	ea83 0101 	eor.w	r1, r3, r1
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	2d36      	cmp	r5, #54	; 0x36
 80002c8:	bf88      	it	hi
 80002ca:	bd30      	pophi	{r4, r5, pc}
 80002cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x70>
 80002de:	4240      	negs	r0, r0
 80002e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f0:	d002      	beq.n	80002f8 <__adddf3+0x84>
 80002f2:	4252      	negs	r2, r2
 80002f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f8:	ea94 0f05 	teq	r4, r5
 80002fc:	f000 80a7 	beq.w	800044e <__adddf3+0x1da>
 8000300:	f1a4 0401 	sub.w	r4, r4, #1
 8000304:	f1d5 0e20 	rsbs	lr, r5, #32
 8000308:	db0d      	blt.n	8000326 <__adddf3+0xb2>
 800030a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030e:	fa22 f205 	lsr.w	r2, r2, r5
 8000312:	1880      	adds	r0, r0, r2
 8000314:	f141 0100 	adc.w	r1, r1, #0
 8000318:	fa03 f20e 	lsl.w	r2, r3, lr
 800031c:	1880      	adds	r0, r0, r2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	4159      	adcs	r1, r3
 8000324:	e00e      	b.n	8000344 <__adddf3+0xd0>
 8000326:	f1a5 0520 	sub.w	r5, r5, #32
 800032a:	f10e 0e20 	add.w	lr, lr, #32
 800032e:	2a01      	cmp	r2, #1
 8000330:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000334:	bf28      	it	cs
 8000336:	f04c 0c02 	orrcs.w	ip, ip, #2
 800033a:	fa43 f305 	asr.w	r3, r3, r5
 800033e:	18c0      	adds	r0, r0, r3
 8000340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000348:	d507      	bpl.n	800035a <__adddf3+0xe6>
 800034a:	f04f 0e00 	mov.w	lr, #0
 800034e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000352:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000356:	eb6e 0101 	sbc.w	r1, lr, r1
 800035a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035e:	d31b      	bcc.n	8000398 <__adddf3+0x124>
 8000360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000364:	d30c      	bcc.n	8000380 <__adddf3+0x10c>
 8000366:	0849      	lsrs	r1, r1, #1
 8000368:	ea5f 0030 	movs.w	r0, r0, rrx
 800036c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000370:	f104 0401 	add.w	r4, r4, #1
 8000374:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800037c:	f080 809a 	bcs.w	80004b4 <__adddf3+0x240>
 8000380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	ea41 0105 	orr.w	r1, r1, r5
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800039c:	4140      	adcs	r0, r0
 800039e:	eb41 0101 	adc.w	r1, r1, r1
 80003a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a6:	f1a4 0401 	sub.w	r4, r4, #1
 80003aa:	d1e9      	bne.n	8000380 <__adddf3+0x10c>
 80003ac:	f091 0f00 	teq	r1, #0
 80003b0:	bf04      	itt	eq
 80003b2:	4601      	moveq	r1, r0
 80003b4:	2000      	moveq	r0, #0
 80003b6:	fab1 f381 	clz	r3, r1
 80003ba:	bf08      	it	eq
 80003bc:	3320      	addeq	r3, #32
 80003be:	f1a3 030b 	sub.w	r3, r3, #11
 80003c2:	f1b3 0220 	subs.w	r2, r3, #32
 80003c6:	da0c      	bge.n	80003e2 <__adddf3+0x16e>
 80003c8:	320c      	adds	r2, #12
 80003ca:	dd08      	ble.n	80003de <__adddf3+0x16a>
 80003cc:	f102 0c14 	add.w	ip, r2, #20
 80003d0:	f1c2 020c 	rsb	r2, r2, #12
 80003d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d8:	fa21 f102 	lsr.w	r1, r1, r2
 80003dc:	e00c      	b.n	80003f8 <__adddf3+0x184>
 80003de:	f102 0214 	add.w	r2, r2, #20
 80003e2:	bfd8      	it	le
 80003e4:	f1c2 0c20 	rsble	ip, r2, #32
 80003e8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f0:	bfdc      	itt	le
 80003f2:	ea41 010c 	orrle.w	r1, r1, ip
 80003f6:	4090      	lslle	r0, r2
 80003f8:	1ae4      	subs	r4, r4, r3
 80003fa:	bfa2      	ittt	ge
 80003fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000400:	4329      	orrge	r1, r5
 8000402:	bd30      	popge	{r4, r5, pc}
 8000404:	ea6f 0404 	mvn.w	r4, r4
 8000408:	3c1f      	subs	r4, #31
 800040a:	da1c      	bge.n	8000446 <__adddf3+0x1d2>
 800040c:	340c      	adds	r4, #12
 800040e:	dc0e      	bgt.n	800042e <__adddf3+0x1ba>
 8000410:	f104 0414 	add.w	r4, r4, #20
 8000414:	f1c4 0220 	rsb	r2, r4, #32
 8000418:	fa20 f004 	lsr.w	r0, r0, r4
 800041c:	fa01 f302 	lsl.w	r3, r1, r2
 8000420:	ea40 0003 	orr.w	r0, r0, r3
 8000424:	fa21 f304 	lsr.w	r3, r1, r4
 8000428:	ea45 0103 	orr.w	r1, r5, r3
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f1c4 040c 	rsb	r4, r4, #12
 8000432:	f1c4 0220 	rsb	r2, r4, #32
 8000436:	fa20 f002 	lsr.w	r0, r0, r2
 800043a:	fa01 f304 	lsl.w	r3, r1, r4
 800043e:	ea40 0003 	orr.w	r0, r0, r3
 8000442:	4629      	mov	r1, r5
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	fa21 f004 	lsr.w	r0, r1, r4
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f094 0f00 	teq	r4, #0
 8000452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000456:	bf06      	itte	eq
 8000458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800045c:	3401      	addeq	r4, #1
 800045e:	3d01      	subne	r5, #1
 8000460:	e74e      	b.n	8000300 <__adddf3+0x8c>
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf18      	it	ne
 8000468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046c:	d029      	beq.n	80004c2 <__adddf3+0x24e>
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	d005      	beq.n	8000486 <__adddf3+0x212>
 800047a:	ea54 0c00 	orrs.w	ip, r4, r0
 800047e:	bf04      	itt	eq
 8000480:	4619      	moveq	r1, r3
 8000482:	4610      	moveq	r0, r2
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	ea91 0f03 	teq	r1, r3
 800048a:	bf1e      	ittt	ne
 800048c:	2100      	movne	r1, #0
 800048e:	2000      	movne	r0, #0
 8000490:	bd30      	popne	{r4, r5, pc}
 8000492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000496:	d105      	bne.n	80004a4 <__adddf3+0x230>
 8000498:	0040      	lsls	r0, r0, #1
 800049a:	4149      	adcs	r1, r1
 800049c:	bf28      	it	cs
 800049e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004a2:	bd30      	pop	{r4, r5, pc}
 80004a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a8:	bf3c      	itt	cc
 80004aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ae:	bd30      	popcc	{r4, r5, pc}
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004bc:	f04f 0000 	mov.w	r0, #0
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf1a      	itte	ne
 80004c8:	4619      	movne	r1, r3
 80004ca:	4610      	movne	r0, r2
 80004cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d0:	bf1c      	itt	ne
 80004d2:	460b      	movne	r3, r1
 80004d4:	4602      	movne	r2, r0
 80004d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004da:	bf06      	itte	eq
 80004dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e0:	ea91 0f03 	teqeq	r1, r3
 80004e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	bf00      	nop

080004ec <__aeabi_ui2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f04f 0500 	mov.w	r5, #0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e750      	b.n	80003ac <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_i2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000524:	bf48      	it	mi
 8000526:	4240      	negmi	r0, r0
 8000528:	f04f 0100 	mov.w	r1, #0
 800052c:	e73e      	b.n	80003ac <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_f2d>:
 8000530:	0042      	lsls	r2, r0, #1
 8000532:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000536:	ea4f 0131 	mov.w	r1, r1, rrx
 800053a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053e:	bf1f      	itttt	ne
 8000540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800054c:	4770      	bxne	lr
 800054e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000552:	bf08      	it	eq
 8000554:	4770      	bxeq	lr
 8000556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800055a:	bf04      	itt	eq
 800055c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e71c      	b.n	80003ac <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aed8 	beq.w	800035a <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6bd      	b.n	800035a <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2iz>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d215      	bcs.n	8000b4a <__aeabi_d2iz+0x36>
 8000b1e:	d511      	bpl.n	8000b44 <__aeabi_d2iz+0x30>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d912      	bls.n	8000b50 <__aeabi_d2iz+0x3c>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d105      	bne.n	8000b5c <__aeabi_d2iz+0x48>
 8000b50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	bf08      	it	eq
 8000b56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
	...

08001160 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
	...

08001170 <__late_init>:
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
	...

08001180 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001180:	e7fe      	b.n	8001180 <__default_exit>
 8001182:	bf00      	nop
	...

08001190 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001190:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001192:	2700      	movs	r7, #0
 8001194:	4e13      	ldr	r6, [pc, #76]	; (80011e4 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8001196:	4d14      	ldr	r5, [pc, #80]	; (80011e8 <__init_ram_areas+0x58>)
 8001198:	4c14      	ldr	r4, [pc, #80]	; (80011ec <__init_ram_areas+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <__init_ram_areas+0x60>)
 800119c:	4915      	ldr	r1, [pc, #84]	; (80011f4 <__init_ram_areas+0x64>)
 800119e:	f106 0c70 	add.w	ip, r6, #112	; 0x70
    while (p < rap->clear_area) {
 80011a2:	429c      	cmp	r4, r3
 80011a4:	d911      	bls.n	80011ca <__init_ram_areas+0x3a>
 80011a6:	461a      	mov	r2, r3
 80011a8:	3904      	subs	r1, #4
      *p = *tp;
 80011aa:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80011ae:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80011b2:	4294      	cmp	r4, r2
 80011b4:	d8f9      	bhi.n	80011aa <__init_ram_areas+0x1a>
 80011b6:	43da      	mvns	r2, r3
 80011b8:	4414      	add	r4, r2
 80011ba:	f024 0403 	bic.w	r4, r4, #3
 80011be:	3404      	adds	r4, #4
 80011c0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80011c2:	429d      	cmp	r5, r3
 80011c4:	d903      	bls.n	80011ce <__init_ram_areas+0x3e>
      *p = 0;
 80011c6:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 80011ca:	429d      	cmp	r5, r3
 80011cc:	d8fb      	bhi.n	80011c6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80011ce:	4566      	cmp	r6, ip
 80011d0:	d005      	beq.n	80011de <__init_ram_areas+0x4e>
 80011d2:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 80011d6:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 80011da:	3610      	adds	r6, #16
 80011dc:	e7e1      	b.n	80011a2 <__init_ram_areas+0x12>
#endif
}
 80011de:	bcf0      	pop	{r4, r5, r6, r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	08003440 	.word	0x08003440
 80011e8:	20001400 	.word	0x20001400
 80011ec:	20001400 	.word	0x20001400
 80011f0:	20001400 	.word	0x20001400
 80011f4:	08003614 	.word	0x08003614
	...

08001200 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001200:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001202:	f000 f95d 	bl	80014c0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <halInit+0x20>)
 8001208:	f000 fdda 	bl	8001dc0 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800120c:	f000 f830 	bl	8001270 <canInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8001210:	f000 f8b6 	bl	8001380 <uartInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001214:	f000 ffe4 	bl	80021e0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8001218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 800121c:	f000 b808 	b.w	8001230 <stInit>
 8001220:	0800353c 	.word	0x0800353c
	...

08001230 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8001230:	f000 be16 	b.w	8001e60 <st_lld_init>
	...

08001240 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8001244:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001246:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001248:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800124a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800124c:	60da      	str	r2, [r3, #12]
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
 800124e:	4770      	bx	lr

08001250 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	0000      	movs	r0, r0
	...

08001260 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001264:	6358      	str	r0, [r3, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 8001266:	4770      	bx	lr
	...

08001270 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 8001270:	f000 baee 	b.w	8001850 <can_lld_init>
	...

08001280 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 8001280:	b430      	push	{r4, r5}

  canp->state       = CAN_STOP;
  canp->config      = NULL;
 8001282:	2100      	movs	r1, #0
  canp->state       = CAN_STOP;
 8001284:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
#if CAN_ENFORCE_USE_CALLBACKS == FALSE
  osalEventObjectInit(&canp->rxfull_event);
 8001286:	f100 0218 	add.w	r2, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800128a:	f100 031c 	add.w	r3, r0, #28
  osalEventObjectInit(&canp->error_event);
 800128e:	f100 0520 	add.w	r5, r0, #32
  canp->state       = CAN_STOP;
 8001292:	7004      	strb	r4, [r0, #0]
  canp->config      = NULL;
 8001294:	6041      	str	r1, [r0, #4]
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 8001296:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800129a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800129e:	6182      	str	r2, [r0, #24]
 80012a0:	61c3      	str	r3, [r0, #28]
  osalThreadQueueObjectInit(&canp->txqueue);
 80012a2:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 80012a6:	f100 0310 	add.w	r3, r0, #16
 80012aa:	e9c0 5408 	strd	r5, r4, [r0, #32]
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
#endif
#endif /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
}
 80012ae:	bc30      	pop	{r4, r5}
 80012b0:	6281      	str	r1, [r0, #40]	; 0x28
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 80012b2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80012b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012ba:	4770      	bx	lr
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <canStart>:
 * @param[in] config    pointer to the @p CANConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void canStart(CANDriver *canp, const CANConfig *config) {
 80012c0:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012c2:	2320      	movs	r3, #32
 80012c4:	4604      	mov	r4, r0
 80012c6:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 80012ca:	2302      	movs	r3, #2
  canp->config = config;
 80012cc:	6041      	str	r1, [r0, #4]
  canp->state = CAN_STARTING;
 80012ce:	7003      	strb	r3, [r0, #0]

  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);
 80012d0:	f000 fae6 	bl	80018a0 <can_lld_start>

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 80012d4:	2203      	movs	r2, #3
 80012d6:	2300      	movs	r3, #0
 80012d8:	7022      	strb	r2, [r4, #0]
 80012da:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80012de:	bd10      	pop	{r4, pc}

080012e0 <canTransmitTimeout>:
 * @api
 */
msg_t canTransmitTimeout(CANDriver *canp,
                         canmbx_t mailbox,
                         const CANTxFrame *ctfp,
                         sysinterval_t timeout) {
 80012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e4:	461e      	mov	r6, r3
 80012e6:	4604      	mov	r4, r0
 80012e8:	460f      	mov	r7, r1
 80012ea:	4690      	mov	r8, r2
 80012ec:	2320      	movs	r3, #32
 80012ee:	f383 8811 	msr	BASEPRI, r3
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
 80012f2:	f100 0508 	add.w	r5, r0, #8
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 80012f6:	7823      	ldrb	r3, [r4, #0]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d004      	beq.n	8001306 <canTransmitTimeout+0x26>
 80012fc:	4639      	mov	r1, r7
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 faf6 	bl	80018f0 <can_lld_is_tx_empty>
 8001304:	b950      	cbnz	r0, 800131c <canTransmitTimeout+0x3c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001306:	4631      	mov	r1, r6
 8001308:	4628      	mov	r0, r5
 800130a:	f001 fae9 	bl	80028e0 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 800130e:	2800      	cmp	r0, #0
 8001310:	d0f1      	beq.n	80012f6 <canTransmitTimeout+0x16>
 8001312:	2300      	movs	r3, #0
 8001314:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
  osalSysUnlock();
  return MSG_OK;
}
 8001318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  can_lld_transmit(canp, mailbox, ctfp);
 800131c:	4620      	mov	r0, r4
 800131e:	4642      	mov	r2, r8
 8001320:	4639      	mov	r1, r7
 8001322:	f000 fb05 	bl	8001930 <can_lld_transmit>
 8001326:	2000      	movs	r0, #0
 8001328:	f380 8811 	msr	BASEPRI, r0
}
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001330 <canReceiveTimeout>:
 * @api
 */
msg_t canReceiveTimeout(CANDriver *canp,
                        canmbx_t mailbox,
                        CANRxFrame *crfp,
                        sysinterval_t timeout) {
 8001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001334:	461e      	mov	r6, r3
 8001336:	4604      	mov	r4, r0
 8001338:	460f      	mov	r7, r1
 800133a:	4690      	mov	r8, r2
 800133c:	2320      	movs	r3, #32
 800133e:	f383 8811 	msr	BASEPRI, r3
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
 8001342:	f100 0510 	add.w	r5, r0, #16
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 8001346:	7823      	ldrb	r3, [r4, #0]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d004      	beq.n	8001356 <canReceiveTimeout+0x26>
 800134c:	4639      	mov	r1, r7
 800134e:	4620      	mov	r0, r4
 8001350:	f000 fb26 	bl	80019a0 <can_lld_is_rx_nonempty>
 8001354:	b950      	cbnz	r0, 800136c <canReceiveTimeout+0x3c>
 8001356:	4631      	mov	r1, r6
 8001358:	4628      	mov	r0, r5
 800135a:	f001 fac1 	bl	80028e0 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 800135e:	2800      	cmp	r0, #0
 8001360:	d0f1      	beq.n	8001346 <canReceiveTimeout+0x16>
 8001362:	2300      	movs	r3, #0
 8001364:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_receive(canp, mailbox, crfp);
  osalSysUnlock();
  return MSG_OK;
}
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  can_lld_receive(canp, mailbox, crfp);
 800136c:	4620      	mov	r0, r4
 800136e:	4642      	mov	r2, r8
 8001370:	4639      	mov	r1, r7
 8001372:	f000 fb35 	bl	80019e0 <can_lld_receive>
 8001376:	2000      	movs	r0, #0
 8001378:	f380 8811 	msr	BASEPRI, r0
}
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001380 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 8001380:	f000 be5e 	b.w	8002040 <uart_lld_init>
	...

08001390 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  uartp->txstate    = UART_TX_IDLE;
 8001390:	2300      	movs	r3, #0
  uartp->state      = UART_STOP;
 8001392:	2201      	movs	r2, #1
  uartp->txstate    = UART_TX_IDLE;
 8001394:	7043      	strb	r3, [r0, #1]
  uartp->state      = UART_STOP;
 8001396:	7002      	strb	r2, [r0, #0]
  uartp->rxstate    = UART_RX_IDLE;
 8001398:	7083      	strb	r3, [r0, #2]
  uartp->config     = NULL;
 800139a:	6043      	str	r3, [r0, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 80013a0:	b510      	push	{r4, lr}
 80013a2:	2320      	movs	r3, #32
 80013a4:	4604      	mov	r4, r0
 80013a6:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 80013aa:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 80013ac:	f000 fe60 	bl	8002070 <uart_lld_start>
  uartp->state = UART_READY;
 80013b0:	2202      	movs	r2, #2
 80013b2:	2300      	movs	r3, #0
 80013b4:	7022      	strb	r2, [r4, #0]
 80013b6:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80013ba:	bd10      	pop	{r4, pc}
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <uartStartReceive>:
 * @param[in] n         number of data frames to receive
 * @param[in] rxbuf     the pointer to the receive buffer
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {
 80013c0:	b510      	push	{r4, lr}
 80013c2:	2320      	movs	r3, #32
 80013c4:	4604      	mov	r4, r0
 80013c6:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");

  uart_lld_start_receive(uartp, n, rxbuf);
 80013ca:	f000 fec9 	bl	8002160 <uart_lld_start_receive>
  uartp->rxstate = UART_RX_ACTIVE;
 80013ce:	2201      	movs	r2, #1
 80013d0:	2300      	movs	r3, #0
 80013d2:	70a2      	strb	r2, [r4, #2]
 80013d4:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	bf00      	nop
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <uartStopReceive>:
 80013e0:	2220      	movs	r2, #32
 80013e2:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(uartp != NULL);

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");

  if (uartp->rxstate == UART_RX_ACTIVE) {
 80013e6:	7882      	ldrb	r2, [r0, #2]
 80013e8:	2a01      	cmp	r2, #1
 80013ea:	d005      	beq.n	80013f8 <uartStopReceive+0x18>
    n = uart_lld_stop_receive(uartp);
    uartp->rxstate = UART_RX_IDLE;
  }
  else {
    n = UART_ERR_NOT_ACTIVE;
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	2300      	movs	r3, #0
 80013f2:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();

  return n;
}
 80013f6:	4770      	bx	lr
size_t uartStopReceive(UARTDriver *uartp) {
 80013f8:	b510      	push	{r4, lr}
 80013fa:	4604      	mov	r4, r0
    n = uart_lld_stop_receive(uartp);
 80013fc:	f000 fec8 	bl	8002190 <uart_lld_stop_receive>
    uartp->rxstate = UART_RX_IDLE;
 8001400:	2300      	movs	r3, #0
 8001402:	70a3      	strb	r3, [r4, #2]
 8001404:	2300      	movs	r3, #0
 8001406:	f383 8811 	msr	BASEPRI, r3
}
 800140a:	bd10      	pop	{r4, pc}
 800140c:	0000      	movs	r0, r0
	...

08001410 <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001410:	2201      	movs	r2, #1
 8001412:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001414:	b410      	push	{r4}
 8001416:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001418:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800141c:	0109      	lsls	r1, r1, #4
 800141e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8001422:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001426:	f000 001f 	and.w	r0, r0, #31
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800142a:	b2c9      	uxtb	r1, r1
 800142c:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
 8001430:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001434:	fa02 f000 	lsl.w	r0, r2, r0
 8001438:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
}
 800143c:	bc10      	pop	{r4}
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800143e:	6018      	str	r0, [r3, #0]
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
	...

08001450 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001450:	2201      	movs	r2, #1
void nvicDisableVector(uint32_t n) {
 8001452:	b430      	push	{r4, r5}
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8001454:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001456:	4906      	ldr	r1, [pc, #24]	; (8001470 <nvicDisableVector+0x20>)
 8001458:	f000 051f 	and.w	r5, r0, #31
 800145c:	0943      	lsrs	r3, r0, #5
 800145e:	40aa      	lsls	r2, r5
 8001460:	3320      	adds	r3, #32
  NVIC->IP[n] = 0U;
 8001462:	4408      	add	r0, r1
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n] = 0U;
 8001468:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
#endif
}
 800146c:	bc30      	pop	{r4, r5}
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
	...

08001480 <irqInit>:
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001480:	2106      	movs	r1, #6
void irqInit(void) {
 8001482:	b508      	push	{r3, lr}
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001484:	4608      	mov	r0, r1
 8001486:	f7ff ffc3 	bl	8001410 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 800148a:	2106      	movs	r1, #6
 800148c:	2007      	movs	r0, #7
 800148e:	f7ff ffbf 	bl	8001410 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8001492:	2106      	movs	r1, #6
 8001494:	2008      	movs	r0, #8
 8001496:	f7ff ffbb 	bl	8001410 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 800149a:	2106      	movs	r1, #6
 800149c:	2009      	movs	r0, #9
 800149e:	f7ff ffb7 	bl	8001410 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 80014a2:	2106      	movs	r1, #6
 80014a4:	200a      	movs	r0, #10
 80014a6:	f7ff ffb3 	bl	8001410 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 80014aa:	2106      	movs	r1, #6
 80014ac:	2017      	movs	r0, #23
 80014ae:	f7ff ffaf 	bl	8001410 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 80014b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 80014b6:	2106      	movs	r1, #6
 80014b8:	2028      	movs	r0, #40	; 0x28
 80014ba:	f7ff bfa9 	b.w	8001410 <nvicEnableVector>
 80014be:	bf00      	nop

080014c0 <hal_lld_init>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	2200      	movs	r2, #0
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <hal_lld_init+0x48>)
void hal_lld_init(void) {
 80014c8:	b510      	push	{r4, lr}
  rccResetAPB1(0xFFFFFFFF);
 80014ca:	691c      	ldr	r4, [r3, #16]
 80014cc:	6118      	str	r0, [r3, #16]
 80014ce:	691c      	ldr	r4, [r3, #16]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	691c      	ldr	r4, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80014d4:	68dc      	ldr	r4, [r3, #12]
 80014d6:	60d8      	str	r0, [r3, #12]
 80014d8:	68d8      	ldr	r0, [r3, #12]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	68da      	ldr	r2, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 80014de:	69da      	ldr	r2, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80014e0:	490a      	ldr	r1, [pc, #40]	; (800150c <hal_lld_init+0x4c>)
  rccEnablePWRInterface(true);
 80014e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e6:	61da      	str	r2, [r3, #28]
 80014e8:	69da      	ldr	r2, [r3, #28]
  rccEnableBKPInterface(true);
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80014f0:	61da      	str	r2, [r3, #28]
 80014f2:	69db      	ldr	r3, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80014f4:	680b      	ldr	r3, [r1, #0]
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	600b      	str	r3, [r1, #0]
  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 80014fc:	f000 fbb8 	bl	8001c70 <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8001500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  irqInit();
 8001504:	f7ff bfbc 	b.w	8001480 <irqInit>
 8001508:	40021000 	.word	0x40021000
 800150c:	40007000 	.word	0x40007000

08001510 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <stm32_clock_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001512:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	f041 0101 	orr.w	r1, r1, #1
 800151a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800151c:	6813      	ldr	r3, [r2, #0]
 800151e:	0798      	lsls	r0, r3, #30
 8001520:	d5fc      	bpl.n	800151c <stm32_clock_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001522:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001524:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001526:	4916      	ldr	r1, [pc, #88]	; (8001580 <stm32_clock_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001528:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800152c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800152e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001530:	684b      	ldr	r3, [r1, #4]
 8001532:	f013 0f0c 	tst.w	r3, #12
 8001536:	d1fb      	bne.n	8001530 <stm32_clock_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001538:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <stm32_clock_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	0399      	lsls	r1, r3, #14
 8001546:	d5fc      	bpl.n	8001542 <stm32_clock_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001548:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800154a:	490d      	ldr	r1, [pc, #52]	; (8001580 <stm32_clock_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800154c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001550:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001558:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800155a:	680b      	ldr	r3, [r1, #0]
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	d5fc      	bpl.n	800155a <stm32_clock_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001560:	2212      	movs	r2, #18
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <stm32_clock_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <stm32_clock_init+0x78>)
 8001566:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8001568:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800156a:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <stm32_clock_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001574:	6853      	ldr	r3, [r2, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d1fa      	bne.n	8001574 <stm32_clock_init+0x64>

#if !STM32_HSI_ENABLED
  RCC->CR &= ~RCC_CR_HSION;
#endif
#endif /* !STM32_NO_INIT */
}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	40022000 	.word	0x40022000
 8001588:	001d6400 	.word	0x001d6400
 800158c:	00000000 	.word	0x00000000

08001590 <can_lld_set_filters.constprop.4>:
 * @param[in] cfp       pointer to the filters array, can be @p NULL if
 *                      (num == 0)
 *
 * @notapi
 */
static void can_lld_set_filters(CANDriver* canp,
 8001590:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
    rccEnableCAN1(true);
 8001592:	4c3f      	ldr	r4, [pc, #252]	; (8001690 <can_lld_set_filters.constprop.4+0x100>)
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <can_lld_set_filters.constprop.4+0x104>)
    rccEnableCAN1(true);
 8001596:	69e5      	ldr	r5, [r4, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    rccEnableCAN1(true);
 800159a:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 800159e:	61e5      	str	r5, [r4, #28]
 80015a0:	69e4      	ldr	r4, [r4, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80015a2:	4e3d      	ldr	r6, [pc, #244]	; (8001698 <can_lld_set_filters.constprop.4+0x108>)
 80015a4:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
 80015a8:	4035      	ands	r5, r6
 80015aa:	f045 0501 	orr.w	r5, r5, #1
 80015ae:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 80015b2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80015b6:	4034      	ands	r4, r6
 80015b8:	f044 0401 	orr.w	r4, r4, #1
 80015bc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80015c0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  }
#endif

  if (num > 0) {
 80015c4:	2900      	cmp	r1, #0
 80015c6:	d047      	beq.n	8001658 <can_lld_set_filters.constprop.4+0xc8>
    uint32_t i, fmask;

    /* All filters cleared.*/
    canp->can->FA1R = 0;
 80015c8:	2400      	movs	r4, #0
    canp->can->FS1R = 0;
    canp->can->FFA1R = 0;

#if STM32_CAN_USE_CAN1
    if(canp == &CAND1) {
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 80015ca:	4620      	mov	r0, r4
        canp->can->sFilterRegister[i].FR1 = 0;
 80015cc:	4625      	mov	r5, r4
    canp->can->FA1R = 0;
 80015ce:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    canp->can->FM1R = 0;
 80015d2:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    canp->can->FS1R = 0;
 80015d6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    canp->can->FFA1R = 0;
 80015da:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
 80015de:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 80015e2:	3001      	adds	r0, #1
 80015e4:	280e      	cmp	r0, #14
        canp->can->sFilterRegister[i].FR1 = 0;
 80015e6:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
        canp->can->sFilterRegister[i].FR2 = 0;
 80015ea:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 80015ee:	d1f6      	bne.n	80015de <can_lld_set_filters.constprop.4+0x4e>
 80015f0:	2600      	movs	r6, #0
    }
#endif

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 80015f2:	2701      	movs	r7, #1
      if (cfp->mode)
 80015f4:	7894      	ldrb	r4, [r2, #2]
      fmask = 1 << cfp->filter;
 80015f6:	8810      	ldrh	r0, [r2, #0]
      if (cfp->mode)
 80015f8:	f014 0f01 	tst.w	r4, #1
 80015fc:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
    for (i = 0; i < num; i++) {
 8001600:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 8001604:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 8001608:	d005      	beq.n	8001616 <can_lld_set_filters.constprop.4+0x86>
        canp->can->FM1R |= fmask;
 800160a:	f8d3 c204 	ldr.w	ip, [r3, #516]	; 0x204
 800160e:	ea40 0c0c 	orr.w	ip, r0, ip
 8001612:	f8c3 c204 	str.w	ip, [r3, #516]	; 0x204
      if (cfp->scale)
 8001616:	f014 0f02 	tst.w	r4, #2
 800161a:	d005      	beq.n	8001628 <can_lld_set_filters.constprop.4+0x98>
        canp->can->FS1R |= fmask;
 800161c:	f8d3 c20c 	ldr.w	ip, [r3, #524]	; 0x20c
 8001620:	ea40 0c0c 	orr.w	ip, r0, ip
 8001624:	f8c3 c20c 	str.w	ip, [r3, #524]	; 0x20c
      if (cfp->assignment)
 8001628:	0764      	lsls	r4, r4, #29
 800162a:	d504      	bpl.n	8001636 <can_lld_set_filters.constprop.4+0xa6>
        canp->can->FFA1R |= fmask;
 800162c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8001630:	4304      	orrs	r4, r0
 8001632:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 8001636:	6854      	ldr	r4, [r2, #4]
    for (i = 0; i < num; i++) {
 8001638:	42b1      	cmp	r1, r6
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800163a:	f8c5 4240 	str.w	r4, [r5, #576]	; 0x240
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800163e:	6894      	ldr	r4, [r2, #8]
      canp->can->FA1R |= fmask;
      cfp++;
 8001640:	f102 020c 	add.w	r2, r2, #12
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 8001644:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
      canp->can->FA1R |= fmask;
 8001648:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800164c:	ea40 0004 	orr.w	r0, r0, r4
 8001650:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 8001654:	d1ce      	bne.n	80015f4 <can_lld_set_filters.constprop.4+0x64>
 8001656:	e00c      	b.n	8001672 <can_lld_set_filters.constprop.4+0xe2>
      canp->can->sFilterRegister[can2sb].FR2 = 0;
    }
#endif
    canp->can->FM1R = 0;
    canp->can->FFA1R = 0;
    canp->can->FS1R = 1;
 8001658:	2201      	movs	r2, #1
    canp->can->sFilterRegister[0].FR1 = 0;
 800165a:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 800165e:	f8c3 1244 	str.w	r1, [r3, #580]	; 0x244
    canp->can->FM1R = 0;
 8001662:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
 8001666:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
 800166a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
 800166e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
      canp->can->FA1R |= 1 << can2sb;
    }
#endif
  }
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8001672:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
    rccDisableCAN1();
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <can_lld_set_filters.constprop.4+0x100>)
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8001678:	f021 0101 	bic.w	r1, r1, #1
 800167c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    rccDisableCAN1();
 8001680:	69d3      	ldr	r3, [r2, #28]
#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
    rccDisableCAN3();
  }
#endif
}
 8001682:	bcf0      	pop	{r4, r5, r6, r7}
    rccDisableCAN1();
 8001684:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	69d3      	ldr	r3, [r2, #28]
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	20000828 	.word	0x20000828
 8001698:	ffff0000 	.word	0xffff0000
 800169c:	00000000 	.word	0x00000000

080016a0 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <Vector8C+0x64>)
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 80016a2:	b510      	push	{r4, lr}
  tsr = canp->can->TSR;
 80016a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a6:	6893      	ldr	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 80016a8:	f013 0401 	ands.w	r4, r3, #1
  canp->can->TSR = tsr;
 80016ac:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 80016ae:	d005      	beq.n	80016bc <Vector8C+0x1c>
      flags |= CAN_MAILBOX_TO_MASK(1U);
 80016b0:	f013 0f0c 	tst.w	r3, #12
 80016b4:	bf14      	ite	ne
 80016b6:	f44f 3480 	movne.w	r4, #65536	; 0x10000
 80016ba:	2401      	moveq	r4, #1
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 80016bc:	05d9      	lsls	r1, r3, #23
 80016be:	d506      	bpl.n	80016ce <Vector8C+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 80016c0:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 80016c4:	bf14      	ite	ne
 80016c6:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
      flags |= CAN_MAILBOX_TO_MASK(2U);
 80016ca:	f044 0402 	orreq.w	r4, r4, #2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 80016ce:	03da      	lsls	r2, r3, #15
 80016d0:	d506      	bpl.n	80016e0 <Vector8C+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 80016d2:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 80016d6:	bf14      	ite	ne
 80016d8:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
      flags |= CAN_MAILBOX_TO_MASK(3U);
 80016dc:	f044 0404 	orreq.w	r4, r4, #4
 80016e0:	2320      	movs	r3, #32
 80016e2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80016e6:	2100      	movs	r1, #0
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <Vector8C+0x68>)
 80016ea:	f001 f911 	bl	8002910 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80016ee:	4621      	mov	r1, r4
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <Vector8C+0x6c>)
 80016f2:	f001 f975 	bl	80029e0 <chEvtBroadcastFlagsI>
 80016f6:	2300      	movs	r3, #0
 80016f8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80016fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001700:	f001 ba5e 	b.w	8002bc0 <_port_irq_epilogue>
 8001704:	20000828 	.word	0x20000828
 8001708:	20000830 	.word	0x20000830
 800170c:	20000844 	.word	0x20000844

08001710 <Vector90>:
/**
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8001710:	b538      	push	{r3, r4, r5, lr}
  rf0r = canp->can->RF0R;
 8001712:	4c16      	ldr	r4, [pc, #88]	; (800176c <Vector90+0x5c>)
 8001714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001716:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8001718:	07aa      	lsls	r2, r5, #30
 800171a:	d111      	bne.n	8001740 <Vector90+0x30>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800171c:	06eb      	lsls	r3, r5, #27
 800171e:	d50b      	bpl.n	8001738 <Vector90+0x28>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8001720:	2110      	movs	r1, #16
 8001722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001724:	2320      	movs	r3, #32
 8001726:	60d1      	str	r1, [r2, #12]
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <Vector90+0x60>)
 800172e:	f001 f957 	bl	80029e0 <chEvtBroadcastFlagsI>
 8001732:	2300      	movs	r3, #0
 8001734:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8001738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800173c:	f001 ba40 	b.w	8002bc0 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	2120      	movs	r1, #32
 8001744:	f022 0202 	bic.w	r2, r2, #2
 8001748:	615a      	str	r2, [r3, #20]
 800174a:	f381 8811 	msr	BASEPRI, r1
  chThdDequeueAllI(tqp, msg);
 800174e:	2100      	movs	r1, #0
 8001750:	f104 0010 	add.w	r0, r4, #16
 8001754:	f001 f8dc 	bl	8002910 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 8001758:	f104 0018 	add.w	r0, r4, #24
 800175c:	2101      	movs	r1, #1
 800175e:	f001 f93f 	bl	80029e0 <chEvtBroadcastFlagsI>
 8001762:	2300      	movs	r3, #0
 8001764:	f383 8811 	msr	BASEPRI, r3
 8001768:	e7d8      	b.n	800171c <Vector90+0xc>
 800176a:	bf00      	nop
 800176c:	20000828 	.word	0x20000828
 8001770:	20000848 	.word	0x20000848
	...

08001780 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8001780:	b538      	push	{r3, r4, r5, lr}
  rf1r = canp->can->RF1R;
 8001782:	4c16      	ldr	r4, [pc, #88]	; (80017dc <Vector94+0x5c>)
 8001784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001786:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8001788:	07aa      	lsls	r2, r5, #30
 800178a:	d111      	bne.n	80017b0 <Vector94+0x30>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800178c:	06eb      	lsls	r3, r5, #27
 800178e:	d50b      	bpl.n	80017a8 <Vector94+0x28>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8001790:	2110      	movs	r1, #16
 8001792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001794:	2320      	movs	r3, #32
 8001796:	6111      	str	r1, [r2, #16]
 8001798:	f383 8811 	msr	BASEPRI, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <Vector94+0x60>)
 800179e:	f001 f91f 	bl	80029e0 <chEvtBroadcastFlagsI>
 80017a2:	2300      	movs	r3, #0
 80017a4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80017a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80017ac:	f001 ba08 	b.w	8002bc0 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	2120      	movs	r1, #32
 80017b4:	f022 0210 	bic.w	r2, r2, #16
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	f381 8811 	msr	BASEPRI, r1
  chThdDequeueAllI(tqp, msg);
 80017be:	2100      	movs	r1, #0
 80017c0:	f104 0010 	add.w	r0, r4, #16
 80017c4:	f001 f8a4 	bl	8002910 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 80017c8:	f104 0018 	add.w	r0, r4, #24
 80017cc:	2102      	movs	r1, #2
 80017ce:	f001 f907 	bl	80029e0 <chEvtBroadcastFlagsI>
 80017d2:	2300      	movs	r3, #0
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	e7d8      	b.n	800178c <Vector94+0xc>
 80017da:	bf00      	nop
 80017dc:	20000828 	.word	0x20000828
 80017e0:	20000848 	.word	0x20000848
	...

080017f0 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 80017f0:	b538      	push	{r3, r4, r5, lr}
  msr = canp->can->MSR;
 80017f2:	4d15      	ldr	r5, [pc, #84]	; (8001848 <Vector98+0x58>)
 80017f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017f6:	685c      	ldr	r4, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 80017f8:	0722      	lsls	r2, r4, #28
  canp->can->MSR = msr;
 80017fa:	605c      	str	r4, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 80017fc:	d411      	bmi.n	8001822 <Vector98+0x32>
  if (msr & CAN_MSR_ERRI) {
 80017fe:	0763      	lsls	r3, r4, #29
 8001800:	d50b      	bpl.n	800181a <Vector98+0x2a>
    uint32_t esr = canp->can->ESR;
 8001802:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001804:	2320      	movs	r3, #32
 8001806:	6991      	ldr	r1, [r2, #24]
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	480f      	ldr	r0, [pc, #60]	; (800184c <Vector98+0x5c>)
 800180e:	0409      	lsls	r1, r1, #16
 8001810:	f001 f8e6 	bl	80029e0 <chEvtBroadcastFlagsI>
 8001814:	2300      	movs	r3, #0
 8001816:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800181a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800181e:	f001 b9cf 	b.w	8002bc0 <_port_irq_epilogue>
    canp->state = CAN_READY;
 8001822:	2103      	movs	r1, #3
 8001824:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8001826:	681a      	ldr	r2, [r3, #0]
    canp->state = CAN_READY;
 8001828:	f800 1b28 	strb.w	r1, [r0], #40
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800182c:	f022 0202 	bic.w	r2, r2, #2
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	2320      	movs	r3, #32
 8001834:	f383 8811 	msr	BASEPRI, r3
 8001838:	2100      	movs	r1, #0
 800183a:	f001 f8d1 	bl	80029e0 <chEvtBroadcastFlagsI>
 800183e:	2300      	movs	r3, #0
 8001840:	f383 8811 	msr	BASEPRI, r3
 8001844:	e7db      	b.n	80017fe <Vector98+0xe>
 8001846:	bf00      	nop
 8001848:	20000828 	.word	0x20000828
 800184c:	20000848 	.word	0x20000848

08001850 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 8001850:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 8001852:	4c0e      	ldr	r4, [pc, #56]	; (800188c <can_lld_init+0x3c>)
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fd13 	bl	8001280 <canObjectInit>
  CAND1.can = CAN1;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <can_lld_init+0x40>)
#if defined(STM32_CAN1_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN1_UNIFIED_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800185c:	210b      	movs	r1, #11
 800185e:	2013      	movs	r0, #19
  CAND1.can = CAN1;
 8001860:	62e3      	str	r3, [r4, #44]	; 0x2c
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8001862:	f7ff fdd5 	bl	8001410 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8001866:	210b      	movs	r1, #11
 8001868:	2014      	movs	r0, #20
 800186a:	f7ff fdd1 	bl	8001410 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800186e:	210b      	movs	r1, #11
 8001870:	2015      	movs	r0, #21
 8001872:	f7ff fdcd 	bl	8001410 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8001876:	210b      	movs	r1, #11
 8001878:	2016      	movs	r0, #22
 800187a:	f7ff fdc9 	bl	8001410 <nvicEnableVector>
#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
#endif
#endif
}
 800187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS, 0, NULL);
 8001882:	2200      	movs	r2, #0
 8001884:	200e      	movs	r0, #14
 8001886:	4611      	mov	r1, r2
 8001888:	f7ff be82 	b.w	8001590 <can_lld_set_filters.constprop.4>
 800188c:	20000828 	.word	0x20000828
 8001890:	40006400 	.word	0x40006400
	...

080018a0 <can_lld_start>:
 */
void can_lld_start(CANDriver *canp) {

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <can_lld_start+0x44>)
void can_lld_start(CANDriver *canp) {
 80018a2:	b510      	push	{r4, lr}
  if (&CAND1 == canp) {
 80018a4:	4298      	cmp	r0, r3
void can_lld_start(CANDriver *canp) {
 80018a6:	4604      	mov	r4, r0
  if (&CAND1 == canp) {
 80018a8:	d015      	beq.n	80018d6 <can_lld_start+0x36>
    rccEnableCAN3(true);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 80018aa:	2201      	movs	r2, #1
 80018ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018ae:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	07d1      	lsls	r1, r2, #31
 80018b4:	d407      	bmi.n	80018c6 <can_lld_start+0x26>
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80018b6:	2101      	movs	r1, #1
 80018b8:	2008      	movs	r0, #8
 80018ba:	f000 fe71 	bl	80025a0 <chSchGoSleepTimeoutS>
 80018be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	07d2      	lsls	r2, r2, #31
 80018c4:	d5f7      	bpl.n	80018b6 <can_lld_start+0x16>
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 80018c6:	6862      	ldr	r2, [r4, #4]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <can_lld_start+0x48>)
  canp->can->BTR = canp->config->btr;
 80018ca:	6850      	ldr	r0, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 80018cc:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 80018ce:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 80018d0:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80018d2:	6159      	str	r1, [r3, #20]
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#endif
}
 80018d4:	bd10      	pop	{r4, pc}
    rccEnableCAN1(true);
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <can_lld_start+0x4c>)
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80018de:	61da      	str	r2, [r3, #28]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	e7e2      	b.n	80018aa <can_lld_start+0xa>
 80018e4:	20000828 	.word	0x20000828
 80018e8:	0001875b 	.word	0x0001875b
 80018ec:	40021000 	.word	0x40021000

080018f0 <can_lld_is_tx_empty>:
 *
 * @notapi
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 80018f0:	2903      	cmp	r1, #3
 80018f2:	d81a      	bhi.n	800192a <can_lld_is_tx_empty+0x3a>
 80018f4:	e8df f001 	tbb	[pc, r1]
 80018f8:	02070c11 	.word	0x02070c11
  case 1:
    return (canp->can->TSR & CAN_TSR_TME0) != 0;
  case 2:
    return (canp->can->TSR & CAN_TSR_TME1) != 0;
  case 3:
    return (canp->can->TSR & CAN_TSR_TME2) != 0;
 80018fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	f3c0 7000 	ubfx	r0, r0, #28, #1
 8001904:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME1) != 0;
 8001906:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001908:	6898      	ldr	r0, [r3, #8]
 800190a:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 800190e:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME0) != 0;
 8001910:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	f3c0 6080 	ubfx	r0, r0, #26, #1
 8001918:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 800191a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 8001922:	bf14      	ite	ne
 8001924:	2001      	movne	r0, #1
 8001926:	2000      	moveq	r0, #0
 8001928:	4770      	bx	lr
  default:
    return false;
 800192a:	2000      	movs	r0, #0
  }
}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop

08001930 <can_lld_transmit>:
                      const CANTxFrame *ctfp) {
  uint32_t tir;
  CAN_TxMailBox_TypeDef *tmbp;

  /* Pointer to a free transmission mailbox.*/
  switch (mailbox) {
 8001930:	2903      	cmp	r1, #3
 8001932:	d833      	bhi.n	800199c <can_lld_transmit+0x6c>
 8001934:	e8df f001 	tbb	[pc, r1]
 8001938:	021e2a22 	.word	0x021e2a22
    break;
  case 2:
    tmbp = &canp->can->sTxMailBox[1];
    break;
  case 3:
    tmbp = &canp->can->sTxMailBox[2];
 800193c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800193e:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 8001942:	7810      	ldrb	r0, [r2, #0]
                      const CANTxFrame *ctfp) {
 8001944:	b410      	push	{r4}
 8001946:	f3c0 1300 	ubfx	r3, r0, #4, #1
  default:
    return;
  }

  /* Preparing the message.*/
  if (ctfp->IDE)
 800194a:	0684      	lsls	r4, r0, #26
 800194c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001950:	d520      	bpl.n	8001994 <can_lld_transmit+0x64>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8001952:	6854      	ldr	r4, [r2, #4]
 8001954:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 8001958:	f043 0304 	orr.w	r3, r3, #4
          CAN_TI0R_IDE;
  else
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
  tmbp->TDTR = ctfp->DLC;
 800195c:	f000 000f 	and.w	r0, r0, #15
  tmbp->TDLR = ctfp->data32[0];
  tmbp->TDHR = ctfp->data32[1];
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001960:	f043 0301 	orr.w	r3, r3, #1
  tmbp->TDHR = ctfp->data32[1];
 8001964:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
  tmbp->TDTR = ctfp->DLC;
 8001968:	6048      	str	r0, [r1, #4]
  tmbp->TDLR = ctfp->data32[0];
 800196a:	608c      	str	r4, [r1, #8]
  tmbp->TDHR = ctfp->data32[1];
 800196c:	60ca      	str	r2, [r1, #12]
}
 800196e:	bc10      	pop	{r4}
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001970:	600b      	str	r3, [r1, #0]
}
 8001972:	4770      	bx	lr
    tmbp = &canp->can->sTxMailBox[1];
 8001974:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001976:	f501 71c8 	add.w	r1, r1, #400	; 0x190
    break;
 800197a:	e7e2      	b.n	8001942 <can_lld_transmit+0x12>
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 800197c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800197e:	688b      	ldr	r3, [r1, #8]
 8001980:	f3c3 6301 	ubfx	r3, r3, #24, #2
 8001984:	3318      	adds	r3, #24
 8001986:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    break;
 800198a:	e7da      	b.n	8001942 <can_lld_transmit+0x12>
    tmbp = &canp->can->sTxMailBox[0];
 800198c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800198e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    break;
 8001992:	e7d6      	b.n	8001942 <can_lld_transmit+0x12>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8001994:	8894      	ldrh	r4, [r2, #4]
 8001996:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
 800199a:	e7df      	b.n	800195c <can_lld_transmit+0x2c>
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <can_lld_is_rx_nonempty>:
 *
 * @notapi
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 80019a0:	2901      	cmp	r1, #1
 80019a2:	d011      	beq.n	80019c8 <can_lld_is_rx_nonempty+0x28>
 80019a4:	d30a      	bcc.n	80019bc <can_lld_is_rx_nonempty+0x1c>
 80019a6:	2902      	cmp	r1, #2
 80019a8:	d106      	bne.n	80019b8 <can_lld_is_rx_nonempty+0x18>
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
  case 1:
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
  case 2:
    return (canp->can->RF1R & CAN_RF1R_FMP1) != 0;
 80019aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019ac:	6918      	ldr	r0, [r3, #16]
 80019ae:	f010 0003 	ands.w	r0, r0, #3
 80019b2:	bf18      	it	ne
 80019b4:	2001      	movne	r0, #1
 80019b6:	4770      	bx	lr
  default:
    return false;
 80019b8:	2000      	movs	r0, #0
  }
}
 80019ba:	4770      	bx	lr
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 80019bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	0792      	lsls	r2, r2, #30
 80019c2:	d0f3      	beq.n	80019ac <can_lld_is_rx_nonempty+0xc>
 80019c4:	2001      	movs	r0, #1
 80019c6:	4770      	bx	lr
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
 80019c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019ca:	68d8      	ldr	r0, [r3, #12]
 80019cc:	f010 0003 	ands.w	r0, r0, #3
 80019d0:	bf18      	it	ne
 80019d2:	2001      	movne	r0, #1
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
	...

080019e0 <can_lld_receive>:
 *
 * @notapi
 */
void can_lld_receive(CANDriver *canp,
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
 80019e0:	b470      	push	{r4, r5, r6}
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
 80019e2:	bb79      	cbnz	r1, 8001a44 <can_lld_receive+0x64>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 80019e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019e6:	68d9      	ldr	r1, [r3, #12]
 80019e8:	0789      	lsls	r1, r1, #30
 80019ea:	d044      	beq.n	8001a76 <can_lld_receive+0x96>
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 80019ec:	2420      	movs	r4, #32
    rir  = canp->can->sFIFOMailBox[0].RIR;
 80019ee:	f8d3 01b0 	ldr.w	r0, [r3, #432]	; 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 80019f2:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 80019f6:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 80019fa:	f8d3 51bc 	ldr.w	r5, [r3, #444]	; 0x1bc
 80019fe:	e9c2 6504 	strd	r6, r5, [r2, #16]
    canp->can->RF0R = CAN_RF0R_RFOM0;
 8001a02:	60dc      	str	r4, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 8001a04:	68dc      	ldr	r4, [r3, #12]
 8001a06:	07a5      	lsls	r5, r4, #30
 8001a08:	d103      	bne.n	8001a12 <can_lld_receive+0x32>
      canp->can->IER |= CAN_IER_FMPIE0;
 8001a0a:	695c      	ldr	r4, [r3, #20]
 8001a0c:	f044 0402 	orr.w	r4, r4, #2
 8001a10:	615c      	str	r4, [r3, #20]
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 8001a12:	7913      	ldrb	r3, [r2, #4]
 8001a14:	0844      	lsrs	r4, r0, #1
 8001a16:	f364 1304 	bfi	r3, r4, #4, #1
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 8001a1a:	0884      	lsrs	r4, r0, #2
 8001a1c:	f364 1345 	bfi	r3, r4, #5, #1
 8001a20:	7113      	strb	r3, [r2, #4]
  if (crfp->IDE)
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	d52b      	bpl.n	8001a7e <can_lld_receive+0x9e>
    crfp->EID = rir >> 3;
 8001a26:	6893      	ldr	r3, [r2, #8]
 8001a28:	08c0      	lsrs	r0, r0, #3
 8001a2a:	f360 031c 	bfi	r3, r0, #0, #29
 8001a2e:	6093      	str	r3, [r2, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8001a30:	7913      	ldrb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 8001a32:	0a08      	lsrs	r0, r1, #8
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8001a34:	f361 0303 	bfi	r3, r1, #0, #4
  crfp->TIME = (uint16_t)(rdtr >> 16);
 8001a38:	0c09      	lsrs	r1, r1, #16
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8001a3a:	7113      	strb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 8001a3c:	7010      	strb	r0, [r2, #0]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 8001a3e:	8051      	strh	r1, [r2, #2]
}
 8001a40:	bc70      	pop	{r4, r5, r6}
 8001a42:	4770      	bx	lr
  switch (mailbox) {
 8001a44:	2901      	cmp	r1, #1
 8001a46:	d020      	beq.n	8001a8a <can_lld_receive+0xaa>
 8001a48:	2902      	cmp	r1, #2
 8001a4a:	d1f9      	bne.n	8001a40 <can_lld_receive+0x60>
 8001a4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    canp->can->RF1R = CAN_RF1R_RFOM1;
 8001a4e:	2420      	movs	r4, #32
    rir  = canp->can->sFIFOMailBox[1].RIR;
 8001a50:	f8d3 01c0 	ldr.w	r0, [r3, #448]	; 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 8001a54:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 8001a58:	f8d3 61c8 	ldr.w	r6, [r3, #456]	; 0x1c8
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 8001a5c:	f8d3 51cc 	ldr.w	r5, [r3, #460]	; 0x1cc
 8001a60:	e9c2 6504 	strd	r6, r5, [r2, #16]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 8001a64:	611c      	str	r4, [r3, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 8001a66:	691c      	ldr	r4, [r3, #16]
 8001a68:	07a4      	lsls	r4, r4, #30
 8001a6a:	d1d2      	bne.n	8001a12 <can_lld_receive+0x32>
      canp->can->IER |= CAN_IER_FMPIE1;
 8001a6c:	695c      	ldr	r4, [r3, #20]
 8001a6e:	f044 0410 	orr.w	r4, r4, #16
 8001a72:	615c      	str	r4, [r3, #20]
 8001a74:	e7cd      	b.n	8001a12 <can_lld_receive+0x32>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 8001a76:	6919      	ldr	r1, [r3, #16]
 8001a78:	078e      	lsls	r6, r1, #30
 8001a7a:	d1e8      	bne.n	8001a4e <can_lld_receive+0x6e>
 8001a7c:	e7e0      	b.n	8001a40 <can_lld_receive+0x60>
    crfp->SID = rir >> 21;
 8001a7e:	8913      	ldrh	r3, [r2, #8]
 8001a80:	0d40      	lsrs	r0, r0, #21
 8001a82:	f360 030a 	bfi	r3, r0, #0, #11
 8001a86:	8113      	strh	r3, [r2, #8]
 8001a88:	e7d2      	b.n	8001a30 <can_lld_receive+0x50>
 8001a8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a8c:	e7ae      	b.n	80019ec <can_lld_receive+0xc>
 8001a8e:	bf00      	nop

08001a90 <canSTM32SetFilters>:
 *                      (num == 0)
 *
 * @api
 */
void canSTM32SetFilters(CANDriver *canp, uint32_t can2sb,
                        uint32_t num, const CANFilter *cfp) {
 8001a90:	b430      	push	{r4, r5}
#if STM32_CAN_USE_CAN3
  osalDbgAssert(CAND3.state == CAN_STOP, "invalid state");
#endif

#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
 8001a92:	4c06      	ldr	r4, [pc, #24]	; (8001aac <canSTM32SetFilters+0x1c>)
 8001a94:	4284      	cmp	r4, r0
 8001a96:	d001      	beq.n	8001a9c <canSTM32SetFilters+0xc>
#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
    can_lld_set_filters(canp, can2sb, num, cfp);
  }
#endif
}
 8001a98:	bc30      	pop	{r4, r5}
 8001a9a:	4770      	bx	lr
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	4611      	mov	r1, r2
    can_lld_set_filters(canp, can2sb, num, cfp);
 8001aa0:	4628      	mov	r0, r5
}
 8001aa2:	bc30      	pop	{r4, r5}
    can_lld_set_filters(canp, can2sb, num, cfp);
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f7ff bd73 	b.w	8001590 <can_lld_set_filters.constprop.4>
 8001aaa:	bf00      	nop
 8001aac:	20000828 	.word	0x20000828

08001ab0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001ab0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <Vector6C+0x28>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <Vector6C+0x2c>)
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	f001 010e 	and.w	r1, r1, #14
 8001abe:	420a      	tst	r2, r1
 8001ac0:	d005      	beq.n	8001ace <Vector6C+0x1e>
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <Vector6C+0x30>)
 8001ac4:	6059      	str	r1, [r3, #4]
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	b10b      	cbz	r3, 8001ace <Vector6C+0x1e>
 8001aca:	6850      	ldr	r0, [r2, #4]
 8001acc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8001ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001ad2:	f001 b875 	b.w	8002bc0 <_port_irq_epilogue>
 8001ad6:	bf00      	nop
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020008 	.word	0x40020008
 8001ae0:	20000858 	.word	0x20000858
	...

08001af0 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <Vector70+0x30>)
 8001af2:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <Vector70+0x34>)
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	0909      	lsrs	r1, r1, #4
 8001afa:	f001 010e 	and.w	r1, r1, #14
 8001afe:	420a      	tst	r2, r1
 8001b00:	d00b      	beq.n	8001b1a <Vector70+0x2a>
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <Vector70+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001b04:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001b06:	6884      	ldr	r4, [r0, #8]
 8001b08:	010a      	lsls	r2, r1, #4
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	b10c      	cbz	r4, 8001b12 <Vector70+0x22>
 8001b0e:	68c0      	ldr	r0, [r0, #12]
 8001b10:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b16:	f001 b853 	b.w	8002bc0 <_port_irq_epilogue>
 8001b1a:	f001 b851 	b.w	8002bc0 <_port_irq_epilogue>
 8001b1e:	bf00      	nop
 8001b20:	40020000 	.word	0x40020000
 8001b24:	4002001c 	.word	0x4002001c
 8001b28:	20000858 	.word	0x20000858
 8001b2c:	00000000 	.word	0x00000000

08001b30 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <Vector74+0x30>)
 8001b32:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <Vector74+0x34>)
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	0a09      	lsrs	r1, r1, #8
 8001b3a:	f001 010e 	and.w	r1, r1, #14
 8001b3e:	420a      	tst	r2, r1
 8001b40:	d00b      	beq.n	8001b5a <Vector74+0x2a>
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <Vector74+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001b44:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001b46:	6904      	ldr	r4, [r0, #16]
 8001b48:	020a      	lsls	r2, r1, #8
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	b10c      	cbz	r4, 8001b52 <Vector74+0x22>
 8001b4e:	6940      	ldr	r0, [r0, #20]
 8001b50:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b56:	f001 b833 	b.w	8002bc0 <_port_irq_epilogue>
 8001b5a:	f001 b831 	b.w	8002bc0 <_port_irq_epilogue>
 8001b5e:	bf00      	nop
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020030 	.word	0x40020030
 8001b68:	20000858 	.word	0x20000858
 8001b6c:	00000000 	.word	0x00000000

08001b70 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <Vector78+0x30>)
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <Vector78+0x34>)
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	0b09      	lsrs	r1, r1, #12
 8001b7a:	f001 010e 	and.w	r1, r1, #14
 8001b7e:	420a      	tst	r2, r1
 8001b80:	d00b      	beq.n	8001b9a <Vector78+0x2a>
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <Vector78+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001b84:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001b86:	6984      	ldr	r4, [r0, #24]
 8001b88:	030a      	lsls	r2, r1, #12
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	b10c      	cbz	r4, 8001b92 <Vector78+0x22>
 8001b8e:	69c0      	ldr	r0, [r0, #28]
 8001b90:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b96:	f001 b813 	b.w	8002bc0 <_port_irq_epilogue>
 8001b9a:	f001 b811 	b.w	8002bc0 <_port_irq_epilogue>
 8001b9e:	bf00      	nop
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020044 	.word	0x40020044
 8001ba8:	20000858 	.word	0x20000858
 8001bac:	00000000 	.word	0x00000000

08001bb0 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <Vector7C+0x30>)
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <Vector7C+0x34>)
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	0c09      	lsrs	r1, r1, #16
 8001bba:	f001 010e 	and.w	r1, r1, #14
 8001bbe:	420a      	tst	r2, r1
 8001bc0:	d00b      	beq.n	8001bda <Vector7C+0x2a>
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <Vector7C+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001bc4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001bc6:	6a04      	ldr	r4, [r0, #32]
 8001bc8:	040a      	lsls	r2, r1, #16
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	b10c      	cbz	r4, 8001bd2 <Vector7C+0x22>
 8001bce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001bd0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001bd6:	f000 bff3 	b.w	8002bc0 <_port_irq_epilogue>
 8001bda:	f000 bff1 	b.w	8002bc0 <_port_irq_epilogue>
 8001bde:	bf00      	nop
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020058 	.word	0x40020058
 8001be8:	20000858 	.word	0x20000858
 8001bec:	00000000 	.word	0x00000000

08001bf0 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <Vector80+0x30>)
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <Vector80+0x34>)
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	0d09      	lsrs	r1, r1, #20
 8001bfa:	f001 010e 	and.w	r1, r1, #14
 8001bfe:	420a      	tst	r2, r1
 8001c00:	d00b      	beq.n	8001c1a <Vector80+0x2a>
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <Vector80+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001c04:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001c06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c08:	050a      	lsls	r2, r1, #20
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	b10c      	cbz	r4, 8001c12 <Vector80+0x22>
 8001c0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001c10:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001c16:	f000 bfd3 	b.w	8002bc0 <_port_irq_epilogue>
 8001c1a:	f000 bfd1 	b.w	8002bc0 <_port_irq_epilogue>
 8001c1e:	bf00      	nop
 8001c20:	40020000 	.word	0x40020000
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	20000858 	.word	0x20000858
 8001c2c:	00000000 	.word	0x00000000

08001c30 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <Vector84+0x30>)
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <Vector84+0x34>)
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	0e09      	lsrs	r1, r1, #24
 8001c3a:	f001 010e 	and.w	r1, r1, #14
 8001c3e:	420a      	tst	r2, r1
 8001c40:	d00b      	beq.n	8001c5a <Vector84+0x2a>
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <Vector84+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001c44:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001c46:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c48:	060a      	lsls	r2, r1, #24
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	b10c      	cbz	r4, 8001c52 <Vector84+0x22>
 8001c4e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001c50:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001c56:	f000 bfb3 	b.w	8002bc0 <_port_irq_epilogue>
 8001c5a:	f000 bfb1 	b.w	8002bc0 <_port_irq_epilogue>
 8001c5e:	bf00      	nop
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020080 	.word	0x40020080
 8001c68:	20000858 	.word	0x20000858
 8001c6c:	00000000 	.word	0x00000000

08001c70 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001c70:	b430      	push	{r4, r5}
  int i;

  dma.streams_mask = 0U;
 8001c72:	2400      	movs	r4, #0
 8001c74:	4d0c      	ldr	r5, [pc, #48]	; (8001ca8 <dmaInit+0x38>)
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001c76:	4623      	mov	r3, r4
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001c78:	4621      	mov	r1, r4
  dma.isr_mask = 0U;
 8001c7a:	e9c5 4400 	strd	r4, r4, [r5]
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <dmaInit+0x3c>)
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <dmaInit+0x40>)
 8001c82:	4c0c      	ldr	r4, [pc, #48]	; (8001cb4 <dmaInit+0x44>)
 8001c84:	e001      	b.n	8001c8a <dmaInit+0x1a>
 8001c86:	f852 0c10 	ldr.w	r0, [r2, #-16]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001c8a:	6001      	str	r1, [r0, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001c8c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001c90:	3301      	adds	r3, #1
 8001c92:	2b07      	cmp	r3, #7
 8001c94:	f102 0210 	add.w	r2, r2, #16
 8001c98:	d1f5      	bne.n	8001c86 <dmaInit+0x16>
  }
  DMA1->IFCR = 0xFFFFFFFFU;
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
#endif
}
 8001c9a:	bc30      	pop	{r4, r5}
  DMA1->IFCR = 0xFFFFFFFFU;
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <dmaInit+0x48>)
 8001ca2:	605a      	str	r2, [r3, #4]
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000890 	.word	0x20000890
 8001cac:	080034d4 	.word	0x080034d4
 8001cb0:	40020008 	.word	0x40020008
 8001cb4:	20000858 	.word	0x20000858
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001cc2:	2401      	movs	r4, #1
 8001cc4:	4e20      	ldr	r6, [pc, #128]	; (8001d48 <dmaStreamAllocate+0x88>)
 8001cc6:	f890 c00e 	ldrb.w	ip, [r0, #14]
 8001cca:	6835      	ldr	r5, [r6, #0]
 8001ccc:	fa04 f70c 	lsl.w	r7, r4, ip
 8001cd0:	423d      	tst	r5, r7
 8001cd2:	d12c      	bne.n	8001d2e <dmaStreamAllocate+0x6e>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001cd4:	4c1d      	ldr	r4, [pc, #116]	; (8001d4c <dmaStreamAllocate+0x8c>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001cd6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8001cda:	f8ce 3004 	str.w	r3, [lr, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001cde:	066b      	lsls	r3, r5, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001ce0:	f844 203c 	str.w	r2, [r4, ip, lsl #3]
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001ce4:	d105      	bne.n	8001cf2 <dmaStreamAllocate+0x32>
    rccEnableDMA1(true);
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <dmaStreamAllocate+0x90>)
 8001ce8:	695c      	ldr	r4, [r3, #20]
 8001cea:	f044 0401 	orr.w	r4, r4, #1
 8001cee:	615c      	str	r4, [r3, #20]
 8001cf0:	695b      	ldr	r3, [r3, #20]
    rccEnableDMA2(true);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001cf2:	240e      	movs	r4, #14
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001cf4:	f04f 0e00 	mov.w	lr, #0
  dmaStreamDisable(dmastp);
 8001cf8:	6843      	ldr	r3, [r0, #4]
 8001cfa:	f8d3 c000 	ldr.w	ip, [r3]
 8001cfe:	f02c 0c0f 	bic.w	ip, ip, #15
 8001d02:	f8c3 c000 	str.w	ip, [r3]
 8001d06:	f890 c00d 	ldrb.w	ip, [r0, #13]
 8001d0a:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001d0e:	6804      	ldr	r4, [r0, #0]
 8001d10:	f8c4 c004 	str.w	ip, [r4, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001d14:	f8c3 e000 	str.w	lr, [r3]

  /* Enables the associated IRQ vector if not already enabled and if a
     callback is defined.*/
  if (func != NULL) {
 8001d18:	b12a      	cbz	r2, 8001d26 <dmaStreamAllocate+0x66>
    if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8001d1a:	6873      	ldr	r3, [r6, #4]
 8001d1c:	6882      	ldr	r2, [r0, #8]
 8001d1e:	4213      	tst	r3, r2
 8001d20:	d007      	beq.n	8001d32 <dmaStreamAllocate+0x72>
      nvicEnableVector(dmastp->vector, priority);
    }
    dma.isr_mask |= (1U << dmastp->selfindex);
 8001d22:	433b      	orrs	r3, r7
 8001d24:	6073      	str	r3, [r6, #4]
  }

  /* Marks the stream as allocated.*/
  dma.streams_mask |= (1U << dmastp->selfindex);
 8001d26:	433d      	orrs	r5, r7
 8001d28:	6035      	str	r5, [r6, #0]

  return false;
 8001d2a:	2000      	movs	r0, #0
}
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
 8001d2e:	4620      	mov	r0, r4
}
 8001d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d32:	4604      	mov	r4, r0
 8001d34:	2701      	movs	r7, #1
      nvicEnableVector(dmastp->vector, priority);
 8001d36:	7bc0      	ldrb	r0, [r0, #15]
 8001d38:	f7ff fb6a 	bl	8001410 <nvicEnableVector>
 8001d3c:	e9d6 5300 	ldrd	r5, r3, [r6]
 8001d40:	7ba2      	ldrb	r2, [r4, #14]
 8001d42:	4097      	lsls	r7, r2
 8001d44:	e7ed      	b.n	8001d22 <dmaStreamAllocate+0x62>
 8001d46:	bf00      	nop
 8001d48:	20000890 	.word	0x20000890
 8001d4c:	20000858 	.word	0x20000858
 8001d50:	40021000 	.word	0x40021000
	...

08001d60 <dmaStreamRelease>:
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8001d60:	2301      	movs	r3, #1
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8001d62:	b570      	push	{r4, r5, r6, lr}
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8001d64:	7b81      	ldrb	r1, [r0, #14]
 8001d66:	4c12      	ldr	r4, [pc, #72]	; (8001db0 <dmaStreamRelease+0x50>)
 8001d68:	408b      	lsls	r3, r1
 8001d6a:	43db      	mvns	r3, r3
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 8001d6c:	e9d4 2500 	ldrd	r2, r5, [r4]

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8001d70:	6886      	ldr	r6, [r0, #8]
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8001d72:	401a      	ands	r2, r3
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8001d74:	4232      	tst	r2, r6
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 8001d76:	ea03 0305 	and.w	r3, r3, r5
 8001d7a:	e9c4 2300 	strd	r2, r3, [r4]
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8001d7e:	d00f      	beq.n	8001da0 <dmaStreamRelease+0x40>
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 8001d80:	2000      	movs	r0, #0
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <dmaStreamRelease+0x54>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 8001d84:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 8001d88:	f843 0031 	str.w	r0, [r3, r1, lsl #3]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001d8c:	0653      	lsls	r3, r2, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 8001d8e:	6060      	str	r0, [r4, #4]
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001d90:	d105      	bne.n	8001d9e <dmaStreamRelease+0x3e>
    rccDisableDMA1();
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <dmaStreamRelease+0x58>)
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	695b      	ldr	r3, [r3, #20]
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma.streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
    rccDisableDMA2();
  }
#endif
}
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	4605      	mov	r5, r0
    nvicDisableVector(dmastp->vector);
 8001da2:	7bc0      	ldrb	r0, [r0, #15]
 8001da4:	f7ff fb54 	bl	8001450 <nvicDisableVector>
 8001da8:	7ba9      	ldrb	r1, [r5, #14]
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	e7e8      	b.n	8001d80 <dmaStreamRelease+0x20>
 8001dae:	bf00      	nop
 8001db0:	20000890 	.word	0x20000890
 8001db4:	20000858 	.word	0x20000858
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <_pal_lld_init>:
#endif

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, true);
 8001dc0:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <_pal_lld_init+0x5c>)
void _pal_lld_init(const PALConfig *config) {
 8001dc2:	b430      	push	{r4, r5}
  rccEnableAPB2(APB2_EN_MASK, true);
 8001dc4:	6991      	ldr	r1, [r2, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <_pal_lld_init+0x60>)
  rccEnableAPB2(APB2_EN_MASK, true);
 8001dc8:	f041 017d 	orr.w	r1, r1, #125	; 0x7d
 8001dcc:	6191      	str	r1, [r2, #24]
  GPIOA->ODR = config->PAData.odr;
 8001dce:	6801      	ldr	r1, [r0, #0]
  rccEnableAPB2(APB2_EN_MASK, true);
 8001dd0:	6992      	ldr	r2, [r2, #24]
  GPIOA->ODR = config->PAData.odr;
 8001dd2:	60d9      	str	r1, [r3, #12]
  GPIOA->CRH = config->PAData.crh;
 8001dd4:	6882      	ldr	r2, [r0, #8]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8001dd6:	4c13      	ldr	r4, [pc, #76]	; (8001e24 <_pal_lld_init+0x64>)
  GPIOA->CRH = config->PAData.crh;
 8001dd8:	605a      	str	r2, [r3, #4]
  GPIOA->CRL = config->PAData.crl;
 8001dda:	6845      	ldr	r5, [r0, #4]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <_pal_lld_init+0x68>)
  GPIOA->CRL = config->PAData.crl;
 8001dde:	601d      	str	r5, [r3, #0]
  GPIOB->ODR = config->PBData.odr;
 8001de0:	68c5      	ldr	r5, [r0, #12]
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_pal_lld_init+0x6c>)
  GPIOB->ODR = config->PBData.odr;
 8001de4:	60e5      	str	r5, [r4, #12]
  GPIOB->CRH = config->PBData.crh;
 8001de6:	6945      	ldr	r5, [r0, #20]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  GPIOB->CRH = config->PBData.crh;
 8001dec:	6065      	str	r5, [r4, #4]
  GPIOB->CRL = config->PBData.crl;
 8001dee:	6905      	ldr	r5, [r0, #16]
 8001df0:	6025      	str	r5, [r4, #0]
  GPIOC->ODR = config->PCData.odr;
 8001df2:	6984      	ldr	r4, [r0, #24]
 8001df4:	60cc      	str	r4, [r1, #12]
  GPIOC->CRH = config->PCData.crh;
 8001df6:	6a04      	ldr	r4, [r0, #32]
 8001df8:	604c      	str	r4, [r1, #4]
  GPIOC->CRL = config->PCData.crl;
 8001dfa:	69c4      	ldr	r4, [r0, #28]
 8001dfc:	600c      	str	r4, [r1, #0]
  GPIOD->ODR = config->PDData.odr;
 8001dfe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001e00:	60d1      	str	r1, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 8001e02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001e04:	6051      	str	r1, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 8001e06:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001e08:	6011      	str	r1, [r2, #0]
  GPIOE->ODR = config->PEData.odr;
 8001e0a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e0c:	60da      	str	r2, [r3, #12]
  GPIOE->CRH = config->PEData.crh;
 8001e0e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001e10:	605a      	str	r2, [r3, #4]
  GPIOE->CRL = config->PEData.crl;
 8001e12:	6b42      	ldr	r2, [r0, #52]	; 0x34
  GPIOG->CRH = config->PGData.crh;
  GPIOG->CRL = config->PGData.crl;
#endif
#endif
#endif
}
 8001e14:	bc30      	pop	{r4, r5}
  GPIOE->CRL = config->PEData.crl;
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	40011000 	.word	0x40011000
 8001e2c:	40011400 	.word	0x40011400

08001e30 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	0792      	lsls	r2, r2, #30
 8001e38:	d401      	bmi.n	8001e3e <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001e3a:	f000 bec1 	b.w	8002bc0 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001e3e:	b510      	push	{r4, lr}
    STM32_ST_TIM->SR = 0U;
 8001e40:	2400      	movs	r4, #0
 8001e42:	2220      	movs	r2, #32
 8001e44:	611c      	str	r4, [r3, #16]
 8001e46:	f382 8811 	msr	BASEPRI, r2
  chSysTimerHandlerI();
 8001e4a:	f000 fa31 	bl	80022b0 <chSysTimerHandlerI>
 8001e4e:	f384 8811 	msr	BASEPRI, r4
}
 8001e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e56:	f000 beb3 	b.w	8002bc0 <_port_irq_epilogue>
 8001e5a:	bf00      	nop
 8001e5c:	0000      	movs	r0, r0
	...

08001e60 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8001e60:	b470      	push	{r4, r5, r6}
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001e62:	2401      	movs	r4, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->CCMR1  = 0;
 8001e68:	2200      	movs	r2, #0
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e6a:	f648 469f 	movw	r6, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e6e:	f64f 75ff 	movw	r5, #65535	; 0xffff
  ST_ENABLE_CLOCK();
 8001e72:	490b      	ldr	r1, [pc, #44]	; (8001ea0 <st_lld_init+0x40>)
 8001e74:	69c8      	ldr	r0, [r1, #28]
 8001e76:	4320      	orrs	r0, r4
 8001e78:	61c8      	str	r0, [r1, #28]
  ST_ENABLE_STOP();
 8001e7a:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <st_lld_init+0x44>)
  ST_ENABLE_CLOCK();
 8001e7c:	69c9      	ldr	r1, [r1, #28]
  ST_ENABLE_STOP();
 8001e7e:	6841      	ldr	r1, [r0, #4]
 8001e80:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001e84:	6041      	str	r1, [r0, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e86:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001e88:	2108      	movs	r1, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e8a:	62dd      	str	r5, [r3, #44]	; 0x2c
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001e8c:	201c      	movs	r0, #28
  STM32_ST_TIM->CCMR1  = 0;
 8001e8e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001e92:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001e94:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001e96:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001e98:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8001e9a:	bc70      	pop	{r4, r5, r6}
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001e9c:	f7ff bab8 	b.w	8001410 <nvicEnableVector>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	e0042000 	.word	0xe0042000
	...

08001eb0 <usart_stop>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8001eb0:	230e      	movs	r3, #14
  dmaStreamDisable(uartp->dmatx);
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8001eb2:	2100      	movs	r1, #0
static void usart_stop(UARTDriver *uartp) {
 8001eb4:	b430      	push	{r4, r5}
  dmaStreamDisable(uartp->dmarx);
 8001eb6:	6905      	ldr	r5, [r0, #16]
 8001eb8:	686c      	ldr	r4, [r5, #4]
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	f022 020f 	bic.w	r2, r2, #15
 8001ec0:	6022      	str	r2, [r4, #0]
 8001ec2:	7b6a      	ldrb	r2, [r5, #13]
  dmaStreamDisable(uartp->dmatx);
 8001ec4:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(uartp->dmarx);
 8001ec6:	682d      	ldr	r5, [r5, #0]
 8001ec8:	fa03 f202 	lsl.w	r2, r3, r2
 8001ecc:	606a      	str	r2, [r5, #4]
  dmaStreamDisable(uartp->dmatx);
 8001ece:	6865      	ldr	r5, [r4, #4]
  uartp->usart->CR1 = 0;
 8001ed0:	6882      	ldr	r2, [r0, #8]
  dmaStreamDisable(uartp->dmatx);
 8001ed2:	6828      	ldr	r0, [r5, #0]
 8001ed4:	f020 000f 	bic.w	r0, r0, #15
 8001ed8:	6028      	str	r0, [r5, #0]
 8001eda:	7b65      	ldrb	r5, [r4, #13]
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	40ab      	lsls	r3, r5
 8001ee0:	6043      	str	r3, [r0, #4]
  uartp->usart->CR2 = 0;
  uartp->usart->CR3 = 0;
}
 8001ee2:	bc30      	pop	{r4, r5}
  uartp->usart->CR1 = 0;
 8001ee4:	60d1      	str	r1, [r2, #12]
  uartp->usart->CR2 = 0;
 8001ee6:	6111      	str	r1, [r2, #16]
  uartp->usart->CR3 = 0;
 8001ee8:	6151      	str	r1, [r2, #20]
}
 8001eea:	4770      	bx	lr
 8001eec:	0000      	movs	r0, r0
	...

08001ef0 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ef0:	070b      	lsls	r3, r1, #28
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001ef2:	b570      	push	{r4, r5, r6, lr}
 8001ef4:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ef6:	d418      	bmi.n	8001f2a <uart_lld_serve_tx_end_irq+0x3a>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001ef8:	230e      	movs	r3, #14

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 8001efa:	2502      	movs	r5, #2
  dmaStreamDisable(uartp->dmatx);
 8001efc:	6962      	ldr	r2, [r4, #20]
  _uart_tx1_isr_code(uartp);
 8001efe:	6866      	ldr	r6, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 8001f00:	6850      	ldr	r0, [r2, #4]
 8001f02:	6801      	ldr	r1, [r0, #0]
 8001f04:	f021 010f 	bic.w	r1, r1, #15
 8001f08:	6001      	str	r1, [r0, #0]
 8001f0a:	7b50      	ldrb	r0, [r2, #13]
 8001f0c:	6811      	ldr	r1, [r2, #0]
  _uart_tx1_isr_code(uartp);
 8001f0e:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(uartp->dmatx);
 8001f10:	4083      	lsls	r3, r0
 8001f12:	604b      	str	r3, [r1, #4]
  _uart_tx1_isr_code(uartp);
 8001f14:	7065      	strb	r5, [r4, #1]
 8001f16:	b12a      	cbz	r2, 8001f24 <uart_lld_serve_tx_end_irq+0x34>
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4790      	blx	r2
 8001f1c:	7863      	ldrb	r3, [r4, #1]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d000      	beq.n	8001f24 <uart_lld_serve_tx_end_irq+0x34>
}
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
  _uart_tx1_isr_code(uartp);
 8001f24:	2300      	movs	r3, #0
 8001f26:	7063      	strb	r3, [r4, #1]
}
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 8001f2a:	4802      	ldr	r0, [pc, #8]	; (8001f34 <uart_lld_serve_tx_end_irq+0x44>)
 8001f2c:	f000 f9b8 	bl	80022a0 <chSysHalt>
 8001f30:	e7e2      	b.n	8001ef8 <uart_lld_serve_tx_end_irq+0x8>
 8001f32:	bf00      	nop
 8001f34:	08003530 	.word	0x08003530
	...

08001f40 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001f40:	070b      	lsls	r3, r1, #28
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001f42:	b570      	push	{r4, r5, r6, lr}
 8001f44:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001f46:	d433      	bmi.n	8001fb0 <uart_lld_serve_rx_end_irq+0x70>
  if (uartp->rxstate == UART_RX_IDLE) {
 8001f48:	78a3      	ldrb	r3, [r4, #2]
 8001f4a:	6862      	ldr	r2, [r4, #4]
 8001f4c:	b93b      	cbnz	r3, 8001f5e <uart_lld_serve_rx_end_irq+0x1e>
    _uart_rx_idle_code(uartp);
 8001f4e:	68d3      	ldr	r3, [r2, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d02c      	beq.n	8001fae <uart_lld_serve_rx_end_irq+0x6e>
 8001f54:	8b21      	ldrh	r1, [r4, #24]
 8001f56:	4620      	mov	r0, r4
}
 8001f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _uart_rx_idle_code(uartp);
 8001f5c:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8001f5e:	210e      	movs	r1, #14
    _uart_rx_complete_isr_code(uartp);
 8001f60:	2602      	movs	r6, #2
    dmaStreamDisable(uartp->dmarx);
 8001f62:	6920      	ldr	r0, [r4, #16]
 8001f64:	6843      	ldr	r3, [r0, #4]
 8001f66:	681d      	ldr	r5, [r3, #0]
 8001f68:	f025 050f 	bic.w	r5, r5, #15
 8001f6c:	601d      	str	r5, [r3, #0]
 8001f6e:	7b45      	ldrb	r5, [r0, #13]
 8001f70:	6800      	ldr	r0, [r0, #0]
 8001f72:	40a9      	lsls	r1, r5
    _uart_rx_complete_isr_code(uartp);
 8001f74:	6895      	ldr	r5, [r2, #8]
    dmaStreamDisable(uartp->dmarx);
 8001f76:	6041      	str	r1, [r0, #4]
    _uart_rx_complete_isr_code(uartp);
 8001f78:	70a6      	strb	r6, [r4, #2]
 8001f7a:	b13d      	cbz	r5, 8001f8c <uart_lld_serve_rx_end_irq+0x4c>
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	47a8      	blx	r5
 8001f80:	78a3      	ldrb	r3, [r4, #2]
 8001f82:	42b3      	cmp	r3, r6
 8001f84:	d113      	bne.n	8001fae <uart_lld_serve_rx_end_irq+0x6e>
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	6862      	ldr	r2, [r4, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2500      	movs	r5, #0
  if (uartp->config->rxchar_cb == NULL)
 8001f8e:	68d2      	ldr	r2, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001f90:	2101      	movs	r1, #1
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8001f92:	42aa      	cmp	r2, r5
 8001f94:	bf14      	ite	ne
 8001f96:	2222      	movne	r2, #34	; 0x22
 8001f98:	2220      	moveq	r2, #32
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001f9a:	68e0      	ldr	r0, [r4, #12]
    _uart_rx_complete_isr_code(uartp);
 8001f9c:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001f9e:	4302      	orrs	r2, r0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001fa0:	3418      	adds	r4, #24
 8001fa2:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001fa4:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001fa6:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
}
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
 8001fb0:	4801      	ldr	r0, [pc, #4]	; (8001fb8 <uart_lld_serve_rx_end_irq+0x78>)
 8001fb2:	f000 f975 	bl	80022a0 <chSysHalt>
 8001fb6:	e7c7      	b.n	8001f48 <uart_lld_serve_rx_end_irq+0x8>
 8001fb8:	08003530 	.word	0x08003530
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001fc2:	f240 130f 	movw	r3, #271	; 0x10f
  USART_TypeDef *u = uartp->usart;
 8001fc6:	4e1b      	ldr	r6, [pc, #108]	; (8002034 <VectorD8+0x74>)
 8001fc8:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 8001fca:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 8001fcc:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001fce:	6862      	ldr	r2, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001fd0:	421d      	tst	r5, r3
 8001fd2:	d01d      	beq.n	8002010 <VectorD8+0x50>
    u->SR = ~USART_SR_LBD;
 8001fd4:	f46f 7280 	mvn.w	r2, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001fd8:	6873      	ldr	r3, [r6, #4]
    u->SR = ~USART_SR_LBD;
 8001fda:	6022      	str	r2, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	b1ba      	cbz	r2, 8002010 <VectorD8+0x50>
  sr = u->SR;   /* SR reset step 1.*/
 8001fe0:	b2ab      	uxth	r3, r5
    sts |= UART_OVERRUN_ERROR;
 8001fe2:	f013 0f08 	tst.w	r3, #8
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2100      	moveq	r1, #0
 8001fea:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 8001fec:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 8001fee:	bf48      	it	mi
 8001ff0:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8001ff4:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8001ff6:	bf48      	it	mi
 8001ff8:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 8001ffc:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 8001ffe:	bf48      	it	mi
 8002000:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8002004:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8002006:	bf48      	it	mi
 8002008:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <VectorD8+0x74>)
 800200e:	4790      	blx	r2
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8002010:	066a      	lsls	r2, r5, #25
 8002012:	d50b      	bpl.n	800202c <VectorD8+0x6c>
 8002014:	067b      	lsls	r3, r7, #25
 8002016:	d509      	bpl.n	800202c <VectorD8+0x6c>
    u->SR = ~USART_SR_TC;
 8002018:	f06f 0240 	mvn.w	r2, #64	; 0x40
    _uart_tx2_isr_code(uartp);
 800201c:	6873      	ldr	r3, [r6, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800201e:	4017      	ands	r7, r2
    _uart_tx2_isr_code(uartp);
 8002020:	685b      	ldr	r3, [r3, #4]
    u->SR = ~USART_SR_TC;
 8002022:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002024:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8002026:	b10b      	cbz	r3, 800202c <VectorD8+0x6c>
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <VectorD8+0x74>)
 800202a:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
}
 800202c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002030:	f000 bdc6 	b.w	8002bc0 <_port_irq_epilogue>
 8002034:	20000898 	.word	0x20000898
	...

08002040 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8002040:	b510      	push	{r4, lr}
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 8002042:	4c07      	ldr	r4, [pc, #28]	; (8002060 <uart_lld_init+0x20>)
 8002044:	4620      	mov	r0, r4
 8002046:	f7ff f9a3 	bl	8001390 <uartObjectInit>
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 800204a:	2108      	movs	r1, #8
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <uart_lld_init+0x24>)
  UARTD2.usart   = USART2;
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <uart_lld_init+0x28>)
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8002050:	f103 0210 	add.w	r2, r3, #16
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8002054:	e9c4 0102 	strd	r0, r1, [r4, #8]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8002058:	e9c4 3204 	strd	r3, r2, [r4, #16]
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
#endif
}
 800205c:	bd10      	pop	{r4, pc}
 800205e:	bf00      	nop
 8002060:	20000898 	.word	0x20000898
 8002064:	08003510 	.word	0x08003510
 8002068:	40004400 	.word	0x40004400
 800206c:	00000000 	.word	0x00000000

08002070 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8002072:	7803      	ldrb	r3, [r0, #0]
void uart_lld_start(UARTDriver *uartp) {
 8002074:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 8002076:	2b01      	cmp	r3, #1
 8002078:	d032      	beq.n	80020e0 <uart_lld_start+0x70>
 800207a:	6885      	ldr	r5, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 800207c:	2300      	movs	r3, #0
  usart_stop(uartp);
 800207e:	4620      	mov	r0, r4
  uartp->rxstate = UART_RX_IDLE;
 8002080:	70a3      	strb	r3, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8002082:	7063      	strb	r3, [r4, #1]
  usart_stop(uartp);
 8002084:	f7ff ff14 	bl	8001eb0 <usart_stop>
    fck = STM32_PCLK2 / uartp->config->speed;
 8002088:	6861      	ldr	r1, [r4, #4]
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <uart_lld_start+0xd0>)
 800208c:	694a      	ldr	r2, [r1, #20]
  u->SR = 0;
 800208e:	2600      	movs	r6, #0
    fck = STM32_PCLK2 / uartp->config->speed;
 8002090:	fbb3 f3f2 	udiv	r3, r3, r2
  if (uartp->config->rxchar_cb == NULL)
 8002094:	68ca      	ldr	r2, [r1, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8002096:	2701      	movs	r7, #1
  if (uartp->config->rxchar_cb == NULL)
 8002098:	2a00      	cmp	r2, #0
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 800209a:	bf14      	ite	ne
 800209c:	2022      	movne	r0, #34	; 0x22
 800209e:	2020      	moveq	r0, #32
  u->BRR = fck;
 80020a0:	60ab      	str	r3, [r5, #8]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80020a2:	6923      	ldr	r3, [r4, #16]
  u->CR1 = uartp->config->cr1 | cr1;
 80020a4:	8b0a      	ldrh	r2, [r1, #24]
  (void)u->SR;  /* SR reset step 1.*/
 80020a6:	f8d5 c000 	ldr.w	ip, [r5]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80020aa:	685b      	ldr	r3, [r3, #4]
  (void)u->DR;  /* SR reset step 2.*/
 80020ac:	f8d5 c004 	ldr.w	ip, [r5, #4]
  u->SR = 0;
 80020b0:	602e      	str	r6, [r5, #0]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80020b2:	8b4e      	ldrh	r6, [r1, #26]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80020b4:	8b89      	ldrh	r1, [r1, #28]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80020b6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80020ba:	f041 01c1 	orr.w	r1, r1, #193	; 0xc1
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80020be:	612e      	str	r6, [r5, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80020c0:	6169      	str	r1, [r5, #20]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80020c2:	68e1      	ldr	r1, [r4, #12]
  u->CR1 = uartp->config->cr1 | cr1;
 80020c4:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
 80020c8:	f042 020c 	orr.w	r2, r2, #12
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80020cc:	3418      	adds	r4, #24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80020ce:	4301      	orrs	r1, r0
  u->CR1 = uartp->config->cr1 | cr1;
 80020d0:	60ea      	str	r2, [r5, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80020d2:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80020d4:	605f      	str	r7, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80020d6:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	433a      	orrs	r2, r7
 80020dc:	601a      	str	r2, [r3, #0]
  usart_start(uartp);
}
 80020de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&UARTD2 == uartp) {
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <uart_lld_start+0xd4>)
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d015      	beq.n	8002112 <uart_lld_start+0xa2>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 80020e6:	6863      	ldr	r3, [r4, #4]
 80020e8:	8b1b      	ldrh	r3, [r3, #24]
 80020ea:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f2:	d103      	bne.n	80020fc <uart_lld_start+0x8c>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80020f4:	68e3      	ldr	r3, [r4, #12]
 80020f6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80020fa:	60e3      	str	r3, [r4, #12]
    uartp->rxbuf = 0;
 80020fc:	2200      	movs	r2, #0
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80020fe:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002102:	68a5      	ldr	r5, [r4, #8]
 8002104:	6848      	ldr	r0, [r1, #4]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002106:	6859      	ldr	r1, [r3, #4]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002108:	1d2b      	adds	r3, r5, #4
 800210a:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 800210c:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 800210e:	8322      	strh	r2, [r4, #24]
 8002110:	e7b4      	b.n	800207c <uart_lld_start+0xc>
      b = dmaStreamAllocate(uartp->dmarx,
 8002112:	4603      	mov	r3, r0
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <uart_lld_start+0xd8>)
 8002116:	210c      	movs	r1, #12
 8002118:	6900      	ldr	r0, [r0, #16]
 800211a:	f7ff fdd1 	bl	8001cc0 <dmaStreamAllocate>
      b = dmaStreamAllocate(uartp->dmatx,
 800211e:	4623      	mov	r3, r4
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <uart_lld_start+0xdc>)
 8002122:	210c      	movs	r1, #12
 8002124:	6960      	ldr	r0, [r4, #20]
 8002126:	f7ff fdcb 	bl	8001cc0 <dmaStreamAllocate>
      rccEnableUSART2(true);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <uart_lld_start+0xe0>)
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 800212c:	210c      	movs	r1, #12
      rccEnableUSART2(true);
 800212e:	69da      	ldr	r2, [r3, #28]
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 8002130:	2026      	movs	r0, #38	; 0x26
      rccEnableUSART2(true);
 8002132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002136:	61da      	str	r2, [r3, #28]
 8002138:	69db      	ldr	r3, [r3, #28]
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 800213a:	f7ff f969 	bl	8001410 <nvicEnableVector>
 800213e:	e7d2      	b.n	80020e6 <uart_lld_start+0x76>
 8002140:	02255100 	.word	0x02255100
 8002144:	20000898 	.word	0x20000898
 8002148:	08001f41 	.word	0x08001f41
 800214c:	08001ef1 	.word	0x08001ef1
 8002150:	40021000 	.word	0x40021000
	...

08002160 <uart_lld_start_receive>:
 * @param[in] n         number of data frames to send
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void uart_lld_start_receive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8002160:	b4f0      	push	{r4, r5, r6, r7}

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);
 8002162:	240e      	movs	r4, #14
 8002164:	6905      	ldr	r5, [r0, #16]

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, n);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002166:	68c0      	ldr	r0, [r0, #12]
  dmaStreamDisable(uartp->dmarx);
 8002168:	686b      	ldr	r3, [r5, #4]
 800216a:	682f      	ldr	r7, [r5, #0]
 800216c:	681e      	ldr	r6, [r3, #0]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 800216e:	f040 0082 	orr.w	r0, r0, #130	; 0x82
  dmaStreamDisable(uartp->dmarx);
 8002172:	f026 060f 	bic.w	r6, r6, #15
 8002176:	601e      	str	r6, [r3, #0]
 8002178:	7b6d      	ldrb	r5, [r5, #13]
 800217a:	40ac      	lsls	r4, r5
 800217c:	607c      	str	r4, [r7, #4]
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
 800217e:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, n);
 8002180:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002182:	6018      	str	r0, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmarx);
 8002184:	681a      	ldr	r2, [r3, #0]
}
 8002186:	bcf0      	pop	{r4, r5, r6, r7}
  dmaStreamEnable(uartp->dmarx);
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	4770      	bx	lr

08002190 <uart_lld_stop_receive>:
  if (uartp->config->rxchar_cb == NULL)
 8002190:	6843      	ldr	r3, [r0, #4]
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
  size_t n;

  dmaStreamDisable(uartp->dmarx);
 8002192:	220e      	movs	r2, #14
  if (uartp->config->rxchar_cb == NULL)
 8002194:	68db      	ldr	r3, [r3, #12]
size_t uart_lld_stop_receive(UARTDriver *uartp) {
 8002196:	b470      	push	{r4, r5, r6}
  if (uartp->config->rxchar_cb == NULL)
 8002198:	2b00      	cmp	r3, #0
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 800219a:	bf0c      	ite	eq
 800219c:	2120      	moveq	r1, #32
 800219e:	2122      	movne	r1, #34	; 0x22
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80021a0:	2601      	movs	r6, #1
  dmaStreamDisable(uartp->dmarx);
 80021a2:	6904      	ldr	r4, [r0, #16]
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	681d      	ldr	r5, [r3, #0]
 80021a8:	f025 050f 	bic.w	r5, r5, #15
 80021ac:	601d      	str	r5, [r3, #0]
 80021ae:	7b65      	ldrb	r5, [r4, #13]
 80021b0:	6824      	ldr	r4, [r4, #0]
 80021b2:	40aa      	lsls	r2, r5
 80021b4:	6062      	str	r2, [r4, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80021b6:	68c4      	ldr	r4, [r0, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80021b8:	f100 0218 	add.w	r2, r0, #24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80021bc:	4321      	orrs	r1, r4
  n = dmaStreamGetTransactionSize(uartp->dmarx);
 80021be:	6858      	ldr	r0, [r3, #4]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80021c0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80021c2:	605e      	str	r6, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80021c4:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4332      	orrs	r2, r6
 80021ca:	601a      	str	r2, [r3, #0]
  uart_enter_rx_idle_loop(uartp);

  return n;
}
 80021cc:	bc70      	pop	{r4, r5, r6}
 80021ce:	4770      	bx	lr

080021d0 <__early_init>:
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 80021d0:	f7ff b99e 	b.w	8001510 <stm32_clock_init>
	...

080021e0 <boardInit>:
 */
void boardInit(void) {
  /*
  * add pin alternate function remap here
  */
}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
	...

080021f0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80021f0:	e7fe      	b.n	80021f0 <_idle_thread>
 80021f2:	bf00      	nop
	...

08002200 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002202:	4d1e      	ldr	r5, [pc, #120]	; (800227c <chSysInit+0x7c>)
  _scheduler_init();
 8002204:	f000 f98c 	bl	8002520 <_scheduler_init>
  _vt_init();
 8002208:	f000 f8a2 	bl	8002350 <_vt_init>
  _core_init();
 800220c:	f000 fc28 	bl	8002a60 <_core_init>
  _heap_init();
 8002210:	f000 fc7e 	bl	8002b10 <_heap_init>
  _factory_init();
 8002214:	f000 fc9c 	bl	8002b50 <_factory_init>
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002218:	4628      	mov	r0, r5
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	4918      	ldr	r1, [pc, #96]	; (8002280 <chSysInit+0x80>)
 800221e:	f000 fa4f 	bl	80026c0 <_thread_init>
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8002222:	2301      	movs	r3, #1
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002224:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  currp->wabase = NULL;
 8002228:	2400      	movs	r4, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	2710      	movs	r7, #16
 800222c:	2620      	movs	r6, #32
  currp->state = CH_STATE_CURRENT;
 800222e:	f880 3020 	strb.w	r3, [r0, #32]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <chSysInit+0x84>)
  reg_value  =  (reg_value                                   |
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <chSysInit+0x88>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002236:	68d9      	ldr	r1, [r3, #12]
  currp->wabase = NULL;
 8002238:	61c4      	str	r4, [r0, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 800223e:	430a      	orrs	r2, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002240:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
 800224a:	f8dc 200c 	ldr.w	r2, [ip, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800224e:	490f      	ldr	r1, [pc, #60]	; (800228c <chSysInit+0x8c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002250:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002254:	f845 0c18 	str.w	r0, [r5, #-24]
 8002258:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800225c:	680a      	ldr	r2, [r1, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	600a      	str	r2, [r1, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	77df      	strb	r7, [r3, #31]
 8002266:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
 800226a:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800226e:	b662      	cpsie	i
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <chSysInit+0x90>)
  }
#endif
}
 8002272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void) chThdCreate(&idle_descriptor);
 8002276:	f000 ba83 	b.w	8002780 <chThdCreate>
 800227a:	bf00      	nop
 800227c:	200009c0 	.word	0x200009c0
 8002280:	080035a0 	.word	0x080035a0
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	05fa0300 	.word	0x05fa0300
 800228c:	e0001000 	.word	0xe0001000
 8002290:	08003578 	.word	0x08003578
	...

080022a0 <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80022a2:	4b01      	ldr	r3, [pc, #4]	; (80022a8 <chSysHalt+0x8>)
 80022a4:	62d8      	str	r0, [r3, #44]	; 0x2c
 80022a6:	e7fe      	b.n	80022a6 <chSysHalt+0x6>
 80022a8:	20000990 	.word	0x20000990
 80022ac:	00000000 	.word	0x00000000

080022b0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80022b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80022b4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002348 <chSysTimerHandlerI+0x98>
  return (systime_t)STM32_ST_TIM->CNT;
 80022b8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80022bc:	464d      	mov	r5, r9
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80022be:	2600      	movs	r6, #0
  vtp = ch.vtlist.next;
 80022c0:	f855 4f1c 	ldr.w	r4, [r5, #28]!
 80022c4:	68a3      	ldr	r3, [r4, #8]
 80022c6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80022ca:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
 80022ce:	b280      	uxth	r0, r0
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80022d0:	eba0 0a02 	sub.w	sl, r0, r2
 80022d4:	fa1f fa8a 	uxth.w	sl, sl
    if (nowdelta < vtp->delta) {
 80022d8:	459a      	cmp	sl, r3
 80022da:	d31f      	bcc.n	800231c <chSysTimerHandlerI+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80022dc:	2720      	movs	r7, #32
 80022de:	e00c      	b.n	80022fa <chSysTimerHandlerI+0x4a>
 80022e0:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80022e4:	6920      	ldr	r0, [r4, #16]
 80022e6:	47d8      	blx	fp
 80022e8:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80022ec:	f8d9 401c 	ldr.w	r4, [r9, #28]
    }
    while (vtp->delta <= nowdelta);
 80022f0:	68a3      	ldr	r3, [r4, #8]
 80022f2:	459a      	cmp	sl, r3
 80022f4:	d3e7      	bcc.n	80022c6 <chSysTimerHandlerI+0x16>
 80022f6:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80022fa:	6821      	ldr	r1, [r4, #0]
      ch.vtlist.lasttime += vtp->delta;
 80022fc:	441a      	add	r2, r3
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80022fe:	42a9      	cmp	r1, r5
      ch.vtlist.lasttime += vtp->delta;
 8002300:	f8a9 2028 	strh.w	r2, [r9, #40]	; 0x28
      fn = vtp->func;
 8002304:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002308:	604d      	str	r5, [r1, #4]
      nowdelta -= vtp->delta;
 800230a:	ebaa 0a03 	sub.w	sl, sl, r3
      ch.vtlist.next = vtp->next;
 800230e:	f8c9 101c 	str.w	r1, [r9, #28]
      vtp->func = NULL;
 8002312:	60e6      	str	r6, [r4, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002314:	d1e4      	bne.n	80022e0 <chSysTimerHandlerI+0x30>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8002316:	f7fe ff9b 	bl	8001250 <stStopAlarm>
 800231a:	e7e1      	b.n	80022e0 <chSysTimerHandlerI+0x30>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800231c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002320:	42ab      	cmp	r3, r5
 8002322:	d00f      	beq.n	8002344 <chSysTimerHandlerI+0x94>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8002324:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8002326:	f8a9 0028 	strh.w	r0, [r9, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800232a:	eba2 020a 	sub.w	r2, r2, sl
 800232e:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 8002330:	8923      	ldrh	r3, [r4, #8]
 8002332:	2b02      	cmp	r3, #2
 8002334:	bf2c      	ite	cs
 8002336:	18c0      	addcs	r0, r0, r3
 8002338:	3002      	addcc	r0, #2
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 800233a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800233e:	b280      	uxth	r0, r0
 8002340:	f7fe bf8e 	b.w	8001260 <stSetAlarm>
 8002344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002348:	20000990 	.word	0x20000990
 800234c:	00000000 	.word	0x00000000

08002350 <_vt_init>:
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8002354:	2100      	movs	r1, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <_vt_init+0x18>)
 8002358:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.delta = (sysinterval_t)-1;
 800235c:	6258      	str	r0, [r3, #36]	; 0x24
  ch.vtlist.lasttime = (systime_t)0;
 800235e:	8519      	strh	r1, [r3, #40]	; 0x28
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002360:	e9c3 2207 	strd	r2, r2, [r3, #28]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000990 	.word	0x20000990
 800236c:	00000000 	.word	0x00000000

08002370 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002376:	4606      	mov	r6, r0
 8002378:	4f2c      	ldr	r7, [pc, #176]	; (800242c <chVTDoSetI+0xbc>)
 800237a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800237c:	2901      	cmp	r1, #1
  vtp->func = vtfunc;
 800237e:	e9c6 2303 	strd	r2, r3, [r6, #12]
 8002382:	b280      	uxth	r0, r0
 8002384:	69fd      	ldr	r5, [r7, #28]
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002386:	f107 031c 	add.w	r3, r7, #28
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800238a:	d92b      	bls.n	80023e4 <chVTDoSetI+0x74>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800238c:	429d      	cmp	r5, r3
 800238e:	d02d      	beq.n	80023ec <chVTDoSetI+0x7c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8002390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002392:	68ab      	ldr	r3, [r5, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8002394:	1a80      	subs	r0, r0, r2
 8002396:	b284      	uxth	r4, r0
 8002398:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800239a:	d316      	bcc.n	80023ca <chVTDoSetI+0x5a>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 800239c:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 800239e:	1ae4      	subs	r4, r4, r3
 80023a0:	68ab      	ldr	r3, [r5, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	d204      	bcs.n	80023b0 <chVTDoSetI+0x40>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80023a6:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 80023a8:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 80023aa:	68ab      	ldr	r3, [r5, #8]
 80023ac:	42a3      	cmp	r3, r4
 80023ae:	d3fa      	bcc.n	80023a6 <chVTDoSetI+0x36>
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
  vtp->prev = vtp->next->prev;
 80023b4:	686b      	ldr	r3, [r5, #4]
 80023b6:	e9c6 5300 	strd	r5, r3, [r6]
  vtp->prev->next = vtp;
 80023ba:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 80023bc:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 80023be:	60b4      	str	r4, [r6, #8]
  p->delta -= delta;
 80023c0:	68ab      	ldr	r3, [r5, #8]
 80023c2:	1b1c      	subs	r4, r3, r4
 80023c4:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80023c6:	627a      	str	r2, [r7, #36]	; 0x24
}
 80023c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 80023ca:	42a3      	cmp	r3, r4
 80023cc:	d9e9      	bls.n	80023a2 <chVTDoSetI+0x32>
  return systime + (systime_t)interval;
 80023ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023d2:	4284      	cmp	r4, r0
 80023d4:	bf94      	ite	ls
 80023d6:	1910      	addls	r0, r2, r4
 80023d8:	1810      	addhi	r0, r2, r0
 80023da:	b280      	uxth	r0, r0
 80023dc:	f7fe ff40 	bl	8001260 <stSetAlarm>
 80023e0:	68ab      	ldr	r3, [r5, #8]
 80023e2:	e7de      	b.n	80023a2 <chVTDoSetI+0x32>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80023e4:	429d      	cmp	r5, r3
 80023e6:	d013      	beq.n	8002410 <chVTDoSetI+0xa0>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80023e8:	2102      	movs	r1, #2
 80023ea:	e7d1      	b.n	8002390 <chVTDoSetI+0x20>
 80023ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80023f0:	428c      	cmp	r4, r1
 80023f2:	bf28      	it	cs
 80023f4:	460c      	movcs	r4, r1
 80023f6:	b2a4      	uxth	r4, r4
      ch.vtlist.lasttime = now;
 80023f8:	8538      	strh	r0, [r7, #40]	; 0x28
 80023fa:	4420      	add	r0, r4
      ch.vtlist.prev = vtp;
 80023fc:	e9c7 6607 	strd	r6, r6, [r7, #28]
  stStartAlarm(time);
 8002400:	b280      	uxth	r0, r0
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8002402:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 8002406:	60b1      	str	r1, [r6, #8]
}
 8002408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800240c:	f7fe bf18 	b.w	8001240 <stStartAlarm>
      vtp->delta = delay;
 8002410:	2302      	movs	r3, #2
 8002412:	461c      	mov	r4, r3
      ch.vtlist.lasttime = now;
 8002414:	8538      	strh	r0, [r7, #40]	; 0x28
 8002416:	4420      	add	r0, r4
      ch.vtlist.prev = vtp;
 8002418:	e9c7 6607 	strd	r6, r6, [r7, #28]
 800241c:	b280      	uxth	r0, r0
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800241e:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 8002422:	60b3      	str	r3, [r6, #8]
}
 8002424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002428:	f7fe bf0a 	b.w	8001240 <stStartAlarm>
 800242c:	20000990 	.word	0x20000990

08002430 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <chVTDoResetI+0x78>)
void chVTDoResetI(virtual_timer_t *vtp) {
 8002432:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	4282      	cmp	r2, r0
 8002438:	d00f      	beq.n	800245a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800243a:	e9d0 2100 	ldrd	r2, r1, [r0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 800243e:	2400      	movs	r4, #0
    vtp->prev->next = vtp->next;
 8002440:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8002442:	6802      	ldr	r2, [r0, #0]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8002444:	331c      	adds	r3, #28
 8002446:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8002448:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 800244a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800244c:	d003      	beq.n	8002456 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 800244e:	6881      	ldr	r1, [r0, #8]
 8002450:	6893      	ldr	r3, [r2, #8]
 8002452:	440b      	add	r3, r1
 8002454:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002456:	bc30      	pop	{r4, r5}
 8002458:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 800245a:	4618      	mov	r0, r3
  vtp->func = NULL;
 800245c:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
 800245e:	6811      	ldr	r1, [r2, #0]
 8002460:	f840 1f1c 	str.w	r1, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002464:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002466:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8002468:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800246a:	d01a      	beq.n	80024a2 <chVTDoResetI+0x72>
 800246c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  ch.vtlist.next->delta += vtp->delta;
 8002470:	6895      	ldr	r5, [r2, #8]
 8002472:	6888      	ldr	r0, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8002474:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8002476:	4428      	add	r0, r5
 8002478:	6088      	str	r0, [r1, #8]
 800247a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	b29b      	uxth	r3, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 8002480:	4298      	cmp	r0, r3
 8002482:	d9e8      	bls.n	8002456 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8002484:	1ac1      	subs	r1, r0, r3
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002486:	2901      	cmp	r1, #1
 8002488:	d909      	bls.n	800249e <chVTDoResetI+0x6e>
 800248a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800248e:	4298      	cmp	r0, r3
 8002490:	bf28      	it	cs
 8002492:	4618      	movcs	r0, r3
}
 8002494:	bc30      	pop	{r4, r5}
  return systime + (systime_t)interval;
 8002496:	4410      	add	r0, r2
  stSetAlarm(time);
 8002498:	b280      	uxth	r0, r0
 800249a:	f7fe bee1 	b.w	8001260 <stSetAlarm>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800249e:	1c98      	adds	r0, r3, #2
 80024a0:	e7f8      	b.n	8002494 <chVTDoResetI+0x64>
}
 80024a2:	bc30      	pop	{r4, r5}
  stStopAlarm();
 80024a4:	f7fe bed4 	b.w	8001250 <stStopAlarm>
 80024a8:	20000990 	.word	0x20000990
 80024ac:	00000000 	.word	0x00000000

080024b0 <wakeup>:
 80024b0:	2320      	movs	r3, #32
 80024b2:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80024b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	d80e      	bhi.n	80024dc <wakeup+0x2c>
 80024be:	e8df f003 	tbb	[pc, r3]
 80024c2:	0d28      	.short	0x0d28
 80024c4:	0408240d 	.word	0x0408240d
 80024c8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80024ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80024cc:	6893      	ldr	r3, [r2, #8]
 80024ce:	3301      	adds	r3, #1
 80024d0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80024d2:	e9d0 2300 	ldrd	r2, r3, [r0]
 80024d6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80024d8:	6802      	ldr	r2, [r0, #0]
 80024da:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80024dc:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80024de:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80024e0:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80024e4:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80024e8:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80024ea:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80024ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	428a      	cmp	r2, r1
 80024f4:	d2fb      	bcs.n	80024ee <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	2100      	movs	r1, #0
 80024fa:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80024fe:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002500:	6058      	str	r0, [r3, #4]
 8002502:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8002506:	bc10      	pop	{r4}
 8002508:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800250a:	2200      	movs	r2, #0
 800250c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800250e:	601a      	str	r2, [r3, #0]
    break;
 8002510:	e7e4      	b.n	80024dc <wakeup+0x2c>
 8002512:	2300      	movs	r3, #0
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000990 	.word	0x20000990

08002520 <_scheduler_init>:
  ch.rlist.prio = NOPRIO;
 8002520:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8002522:	4b03      	ldr	r3, [pc, #12]	; (8002530 <_scheduler_init+0x10>)
 8002524:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8002526:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800252a:	e9c3 3304 	strd	r3, r3, [r3, #16]
}
 800252e:	4770      	bx	lr
 8002530:	20000990 	.word	0x20000990
	...

08002540 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8002540:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8002542:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8002546:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8002548:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 800254c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4282      	cmp	r2, r0
 8002552:	d2fb      	bcs.n	800254c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8002554:	685a      	ldr	r2, [r3, #4]
}
 8002556:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8002558:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800255c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800255e:	6059      	str	r1, [r3, #4]
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000990 	.word	0x20000990
	...

08002570 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8002570:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8002572:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <chSchGoSleepS+0x24>)
 8002576:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8002578:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 800257a:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800257e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8002580:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8002582:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8002584:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 8002588:	601c      	str	r4, [r3, #0]
}
 800258a:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800258c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800258e:	f7fd be57 	b.w	8000240 <_port_switch>
 8002592:	bf00      	nop
 8002594:	20000990 	.word	0x20000990
	...

080025a0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80025a0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80025a2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80025a4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80025a6:	d012      	beq.n	80025ce <chSchGoSleepTimeoutS+0x2e>
 80025a8:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 80025aa:	4c0c      	ldr	r4, [pc, #48]	; (80025dc <chSchGoSleepTimeoutS+0x3c>)
 80025ac:	a801      	add	r0, sp, #4
 80025ae:	69a3      	ldr	r3, [r4, #24]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <chSchGoSleepTimeoutS+0x40>)
 80025b2:	f7ff fedd 	bl	8002370 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80025b6:	4628      	mov	r0, r5
 80025b8:	f7ff ffda 	bl	8002570 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80025bc:	9b04      	ldr	r3, [sp, #16]
 80025be:	b113      	cbz	r3, 80025c6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80025c0:	a801      	add	r0, sp, #4
 80025c2:	f7ff ff35 	bl	8002430 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 80025c6:	69a3      	ldr	r3, [r4, #24]
}
 80025c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025ca:	b007      	add	sp, #28
 80025cc:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 80025ce:	f7ff ffcf 	bl	8002570 <chSchGoSleepS>
 80025d2:	4c02      	ldr	r4, [pc, #8]	; (80025dc <chSchGoSleepTimeoutS+0x3c>)
  return currp->u.rdymsg;
 80025d4:	69a3      	ldr	r3, [r4, #24]
}
 80025d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025d8:	b007      	add	sp, #28
 80025da:	bd30      	pop	{r4, r5, pc}
 80025dc:	20000990 	.word	0x20000990
 80025e0:	080024b1 	.word	0x080024b1
	...

080025f0 <chSchWakeupS>:
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80025f2:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 80025f4:	699e      	ldr	r6, [r3, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 80025f6:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80025f8:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
 80025fa:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80025fc:	68b0      	ldr	r0, [r6, #8]
 80025fe:	4285      	cmp	r5, r0
 8002600:	d80d      	bhi.n	800261e <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 8002602:	2200      	movs	r2, #0
 8002604:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8002608:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	4295      	cmp	r5, r2
 800260e:	d9fb      	bls.n	8002608 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002616:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002618:	605c      	str	r4, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 800261a:	bc70      	pop	{r4, r5, r6}
 800261c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 800261e:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002620:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8002622:	f886 1020 	strb.w	r1, [r6, #32]
    cp = cp->queue.next;
 8002626:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002628:	6891      	ldr	r1, [r2, #8]
 800262a:	4288      	cmp	r0, r1
 800262c:	d9fb      	bls.n	8002626 <chSchWakeupS+0x36>
    ntp->state = CH_STATE_CURRENT;
 800262e:	2001      	movs	r0, #1
  tp->queue.prev             = cp->queue.prev;
 8002630:	6851      	ldr	r1, [r2, #4]
 8002632:	e9c6 2100 	strd	r2, r1, [r6]
  tp->queue.prev->queue.next = tp;
 8002636:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8002638:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 800263a:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 800263e:	4631      	mov	r1, r6
 8002640:	4620      	mov	r0, r4
    currp = ntp;
 8002642:	619c      	str	r4, [r3, #24]
}
 8002644:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8002646:	f7fd bdfb 	b.w	8000240 <_port_switch>
 800264a:	bf00      	nop
 800264c:	20000990 	.word	0x20000990

08002650 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <chSchIsPreemptionRequired+0x14>)
 8002652:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->prio;
 8002654:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8002656:	6890      	ldr	r0, [r2, #8]
 8002658:	689b      	ldr	r3, [r3, #8]
#endif
}
 800265a:	4298      	cmp	r0, r3
 800265c:	bf94      	ite	ls
 800265e:	2000      	movls	r0, #0
 8002660:	2001      	movhi	r0, #1
 8002662:	4770      	bx	lr
 8002664:	20000990 	.word	0x20000990
	...

08002670 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8002670:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <chSchDoRescheduleAhead+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002674:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8002676:	2500      	movs	r5, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002678:	4613      	mov	r3, r2
  thread_t *tp = tqp->next;
 800267a:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 800267c:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 800267e:	6801      	ldr	r1, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002680:	604a      	str	r2, [r1, #4]
  currp->state = CH_STATE_CURRENT;
 8002682:	f880 6020 	strb.w	r6, [r0, #32]
  tqp->next             = tp->queue.next;
 8002686:	6011      	str	r1, [r2, #0]
  tp->state = CH_STATE_READY;
 8002688:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 800268c:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800268e:	6190      	str	r0, [r2, #24]
    cp = cp->queue.next;
 8002690:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4291      	cmp	r1, r2
 8002696:	d3fb      	bcc.n	8002690 <chSchDoRescheduleAhead+0x20>
  tp->queue.prev             = cp->queue.prev;
 8002698:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800269a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 800269c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80026a0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80026a2:	605c      	str	r4, [r3, #4]
}
 80026a4:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 80026a6:	f7fd bdcb 	b.w	8000240 <_port_switch>
 80026aa:	bf00      	nop
 80026ac:	20000990 	.word	0x20000990

080026b0 <chSchDoReschedule>:
 80026b0:	f7ff bfde 	b.w	8002670 <chSchDoRescheduleAhead>
	...

080026c0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 80026c0:	b4f0      	push	{r4, r5, r6, r7}

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80026c2:	2701      	movs	r7, #1
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80026c4:	2600      	movs	r6, #0
  tp->state     = CH_STATE_WTSTART;
 80026c6:	f04f 0c02 	mov.w	ip, #2
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80026ca:	4c0c      	ldr	r4, [pc, #48]	; (80026fc <_thread_init+0x3c>)
  tp->prio      = prio;
 80026cc:	6082      	str	r2, [r0, #8]
  REG_INSERT(tp);
 80026ce:	6965      	ldr	r5, [r4, #20]
  tp->realprio  = prio;
 80026d0:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->name      = name;
 80026d2:	e9c0 5105 	strd	r5, r1, [r0, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 80026d6:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  list_init(&tp->waiting);
 80026da:	f100 0128 	add.w	r1, r0, #40	; 0x28
  REG_INSERT(tp);
 80026de:	6104      	str	r4, [r0, #16]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80026e0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
  tp->epending  = (eventmask_t)0;
 80026e4:	e9c0 660d 	strd	r6, r6, [r0, #52]	; 0x34
  tp->state     = CH_STATE_WTSTART;
 80026e8:	f8a0 c020 	strh.w	ip, [r0, #32]
  REG_INSERT(tp);
 80026ec:	6128      	str	r0, [r5, #16]
 80026ee:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
 80026f0:	e9c0 120a 	strd	r1, r2, [r0, #40]	; 0x28
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 80026f4:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 80026f6:	6302      	str	r2, [r0, #48]	; 0x30
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000990 	.word	0x20000990

08002700 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8002700:	b4f0      	push	{r4, r5, r6, r7}
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002702:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002706:	2100      	movs	r1, #0
  tp->state     = CH_STATE_WTSTART;
 8002708:	2502      	movs	r5, #2
  tp->refs      = (trefs_t)1;
 800270a:	2401      	movs	r4, #1
  REG_INSERT(tp);
 800270c:	4a17      	ldr	r2, [pc, #92]	; (800276c <chThdCreateSuspendedI+0x6c>)
  tp->wabase = tdp->wbase;
 800270e:	f843 6c2c 	str.w	r6, [r3, #-44]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002712:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
 8002716:	e943 761b 	strd	r7, r6, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 800271a:	6806      	ldr	r6, [r0, #0]
 800271c:	68c0      	ldr	r0, [r0, #12]
  tp->state     = CH_STATE_WTSTART;
 800271e:	f803 5c28 	strb.w	r5, [r3, #-40]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002722:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->refs      = (trefs_t)1;
 8002726:	f803 4c26 	strb.w	r4, [r3, #-38]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800272a:	4d11      	ldr	r5, [pc, #68]	; (8002770 <chThdCreateSuspendedI+0x70>)
  REG_INSERT(tp);
 800272c:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 800272e:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8002732:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002736:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 800273a:	f843 0c3c 	str.w	r0, [r3, #-60]
 800273e:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8002742:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 8002746:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 800274a:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 800274e:	f1a3 011c 	sub.w	r1, r3, #28
  tp->name      = name;
 8002752:	f843 6c30 	str.w	r6, [r3, #-48]
  REG_INSERT(tp);
 8002756:	e943 240e 	strd	r2, r4, [r3, #-56]	; 0x38
 800275a:	6120      	str	r0, [r4, #16]
 800275c:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 800275e:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 8002762:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8002764:	f843 1c18 	str.w	r1, [r3, #-24]
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000990 	.word	0x20000990
 8002770:	08000251 	.word	0x08000251
	...

08002780 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002780:	b510      	push	{r4, lr}
 8002782:	2320      	movs	r3, #32
 8002784:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 8002788:	f7ff ffba 	bl	8002700 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800278c:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800278e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8002790:	f7ff ff2e 	bl	80025f0 <chSchWakeupS>
 8002794:	2300      	movs	r3, #0
 8002796:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800279a:	4620      	mov	r0, r4
 800279c:	bd10      	pop	{r4, pc}
 800279e:	bf00      	nop

080027a0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	9f06      	ldr	r7, [sp, #24]
 80027a4:	2420      	movs	r4, #32
 80027a6:	f384 8811 	msr	BASEPRI, r4
  tp->state     = CH_STATE_WTSTART;
 80027aa:	f04f 0e02 	mov.w	lr, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 80027ae:	f04f 0c01 	mov.w	ip, #1
  tp->mtxlist   = NULL;
 80027b2:	2600      	movs	r6, #0
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80027b4:	3948      	subs	r1, #72	; 0x48
 80027b6:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 80027b8:	4d13      	ldr	r5, [pc, #76]	; (8002808 <chThdCreateStatic+0x68>)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80027ba:	e944 3709 	strd	r3, r7, [r4, #-36]	; 0x24
  tp->prio      = prio;
 80027be:	60a2      	str	r2, [r4, #8]
  tp->realprio  = prio;
 80027c0:	63e2      	str	r2, [r4, #60]	; 0x3c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <chThdCreateStatic+0x6c>)
 80027c4:	f1a4 0224 	sub.w	r2, r4, #36	; 0x24
 80027c8:	60e2      	str	r2, [r4, #12]
  tp->wabase = (stkalign_t *)wsp;
 80027ca:	61e0      	str	r0, [r4, #28]
  REG_INSERT(tp);
 80027cc:	696a      	ldr	r2, [r5, #20]
  tp->name      = name;
 80027ce:	4810      	ldr	r0, [pc, #64]	; (8002810 <chThdCreateStatic+0x70>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80027d0:	f844 3c04 	str.w	r3, [r4, #-4]
  list_init(&tp->waiting);
 80027d4:	f104 0128 	add.w	r1, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 80027d8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->name      = name;
 80027dc:	61a0      	str	r0, [r4, #24]
  REG_INSERT(tp);
 80027de:	e9c4 5204 	strd	r5, r2, [r4, #16]
  tp->state     = CH_STATE_WTSTART;
 80027e2:	f8a4 e020 	strh.w	lr, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80027e6:	f884 c022 	strb.w	ip, [r4, #34]	; 0x22
  tp->epending  = (eventmask_t)0;
 80027ea:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80027ee:	4620      	mov	r0, r4
  REG_INSERT(tp);
 80027f0:	6114      	str	r4, [r2, #16]
  tqp->next = (thread_t *)tqp;
 80027f2:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 80027f6:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 80027f8:	4631      	mov	r1, r6
  REG_INSERT(tp);
 80027fa:	616c      	str	r4, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 80027fc:	f7ff fef8 	bl	80025f0 <chSchWakeupS>
 8002800:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  return tp;
}
 8002804:	4620      	mov	r0, r4
 8002806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002808:	20000990 	.word	0x20000990
 800280c:	08000251 	.word	0x08000251
 8002810:	08003598 	.word	0x08003598
	...

08002820 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002820:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <chThdExitS+0x44>)
 8002824:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8002828:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800282c:	42ab      	cmp	r3, r5
  tp->u.exitcode = msg;
 800282e:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002830:	d007      	beq.n	8002842 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8002832:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002834:	4618      	mov	r0, r3
 8002836:	62a2      	str	r2, [r4, #40]	; 0x28
 8002838:	f7ff fe82 	bl	8002540 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800283c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800283e:	42ab      	cmp	r3, r5
 8002840:	d1f7      	bne.n	8002832 <chThdExitS+0x12>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002842:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002846:	b943      	cbnz	r3, 800285a <chThdExitS+0x3a>
 8002848:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800284c:	079b      	lsls	r3, r3, #30
 800284e:	d104      	bne.n	800285a <chThdExitS+0x3a>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8002850:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	6922      	ldr	r2, [r4, #16]
 8002858:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800285a:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800285c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002860:	f7ff be86 	b.w	8002570 <chSchGoSleepS>
 8002864:	20000990 	.word	0x20000990
	...

08002870 <chThdExit>:
 8002870:	2320      	movs	r3, #32
 8002872:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8002876:	f7ff bfd3 	b.w	8002820 <chThdExitS>
 800287a:	bf00      	nop
 800287c:	0000      	movs	r0, r0
	...

08002880 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8002880:	b508      	push	{r3, lr}
 8002882:	4601      	mov	r1, r0
 8002884:	2320      	movs	r3, #32
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	2008      	movs	r0, #8
 800288c:	f7ff fe88 	bl	80025a0 <chSchGoSleepTimeoutS>
 8002890:	2300      	movs	r3, #0
 8002892:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8002896:	bd08      	pop	{r3, pc}
	...

080028a0 <chThdSuspendTimeoutS>:
  return ch.rlist.current;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80028a2:	4602      	mov	r2, r0
 80028a4:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 80028a6:	b121      	cbz	r1, 80028b2 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80028a8:	6003      	str	r3, [r0, #0]
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80028aa:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80028ae:	f7ff be77 	b.w	80025a0 <chSchGoSleepTimeoutS>
}
 80028b2:	f04f 30ff 	mov.w	r0, #4294967295
 80028b6:	4770      	bx	lr
 80028b8:	20000990 	.word	0x20000990
 80028bc:	00000000 	.word	0x00000000

080028c0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80028c0:	6803      	ldr	r3, [r0, #0]
 80028c2:	b143      	cbz	r3, 80028d6 <chThdResumeI+0x16>
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 80028c4:	b410      	push	{r4}
 80028c6:	4602      	mov	r2, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80028c8:	2400      	movs	r4, #0
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80028ca:	4618      	mov	r0, r3
    *trp = NULL;
 80028cc:	6014      	str	r4, [r2, #0]
    tp->u.rdymsg = msg;
 80028ce:	6259      	str	r1, [r3, #36]	; 0x24
  }
}
 80028d0:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 80028d2:	f7ff be35 	b.w	8002540 <chSchReadyI>
 80028d6:	4770      	bx	lr
	...

080028e0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80028e0:	b161      	cbz	r1, 80028fc <chThdEnqueueTimeoutS+0x1c>
 80028e2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80028e6:	b410      	push	{r4}
  queue_insert(currp, tqp);
 80028e8:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 80028ea:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80028ec:	2004      	movs	r0, #4
 80028ee:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 80028f2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80028f4:	6053      	str	r3, [r2, #4]
}
 80028f6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80028f8:	f7ff be52 	b.w	80025a0 <chSchGoSleepTimeoutS>
}
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000990 	.word	0x20000990
	...

08002910 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002910:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002912:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8002914:	4298      	cmp	r0, r3
 8002916:	d00b      	beq.n	8002930 <chThdDequeueAllI+0x20>
 8002918:	4604      	mov	r4, r0
 800291a:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 800291c:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800291e:	4618      	mov	r0, r3
 8002920:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002922:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8002924:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002926:	f7ff fe0b 	bl	8002540 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	429c      	cmp	r4, r3
 800292e:	d1f5      	bne.n	800291c <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8002930:	bd38      	pop	{r3, r4, r5, pc}
 8002932:	bf00      	nop
	...

08002940 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8002940:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 8002942:	e9c0 0000 	strd	r0, r0, [r0]
 8002946:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	0000      	movs	r0, r0
	...

08002950 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8002950:	b470      	push	{r4, r5, r6}
 8002952:	2420      	movs	r4, #32
 8002954:	f384 8811 	msr	BASEPRI, r4
  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 8002958:	2400      	movs	r4, #0
  elp->listener = currp;
 800295a:	4d06      	ldr	r5, [pc, #24]	; (8002974 <chEvtRegisterMaskWithFlags+0x24>)
  elp->next     = esp->next;
 800295c:	6806      	ldr	r6, [r0, #0]
  elp->listener = currp;
 800295e:	69ad      	ldr	r5, [r5, #24]
  elp->next     = esp->next;
 8002960:	600e      	str	r6, [r1, #0]
  esp->next     = elp;
 8002962:	6001      	str	r1, [r0, #0]
  elp->events   = events;
 8002964:	e9c1 5201 	strd	r5, r2, [r1, #4]
  elp->flags    = (eventflags_t)0;
 8002968:	e9c1 4303 	strd	r4, r3, [r1, #12]
 800296c:	f384 8811 	msr	BASEPRI, r4
  elp->wflags   = wflags;
  chSysUnlock();
}
 8002970:	bc70      	pop	{r4, r5, r6}
 8002972:	4770      	bx	lr
 8002974:	20000990 	.word	0x20000990
	...

08002980 <chEvtUnregister>:
 8002980:	2320      	movs	r3, #32
 8002982:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8002986:	4602      	mov	r2, r0
 8002988:	e002      	b.n	8002990 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 800298a:	428b      	cmp	r3, r1
 800298c:	d007      	beq.n	800299e <chEvtUnregister+0x1e>
 800298e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	4283      	cmp	r3, r0
 8002994:	d1f9      	bne.n	800298a <chEvtUnregister+0xa>
 8002996:	2300      	movs	r3, #0
 8002998:	f383 8811 	msr	BASEPRI, r3
      break;
    }
    p = p->next;
  }
  chSysUnlock();
}
 800299c:	4770      	bx	lr
      p->next = elp->next;
 800299e:	680b      	ldr	r3, [r1, #0]
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	2300      	movs	r3, #0
 80029a4:	f383 8811 	msr	BASEPRI, r3
}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 80029b0:	4603      	mov	r3, r0

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80029b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029b4:	f890 0020 	ldrb.w	r0, [r0, #32]
  tp->epending |= events;
 80029b8:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029ba:	280a      	cmp	r0, #10
  tp->epending |= events;
 80029bc:	6359      	str	r1, [r3, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029be:	d00a      	beq.n	80029d6 <chEvtSignalI+0x26>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80029c0:	280b      	cmp	r0, #11
 80029c2:	d000      	beq.n	80029c6 <chEvtSignalI+0x16>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 80029c4:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80029c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80029c8:	438a      	bics	r2, r1
 80029ca:	d1fb      	bne.n	80029c4 <chEvtSignalI+0x14>
    tp->u.rdymsg = MSG_OK;
 80029cc:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
 80029ce:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80029d2:	f7ff bdb5 	b.w	8002540 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80029d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029d8:	4211      	tst	r1, r2
 80029da:	d1f7      	bne.n	80029cc <chEvtSignalI+0x1c>
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop

080029e0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80029e0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 80029e2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80029e4:	42a0      	cmp	r0, r4
 80029e6:	d00f      	beq.n	8002a08 <chEvtBroadcastFlagsI+0x28>
 80029e8:	4606      	mov	r6, r0
 80029ea:	460d      	mov	r5, r1
    elp->flags |= flags;
 80029ec:	68e3      	ldr	r3, [r4, #12]
 80029ee:	432b      	orrs	r3, r5
 80029f0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80029f2:	b115      	cbz	r5, 80029fa <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80029f4:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80029f6:	4213      	tst	r3, r2
 80029f8:	d003      	beq.n	8002a02 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 80029fa:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80029fe:	f7ff ffd7 	bl	80029b0 <chEvtSignalI>
    elp = elp->next;
 8002a02:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8002a04:	42a6      	cmp	r6, r4
 8002a06:	d1f1      	bne.n	80029ec <chEvtBroadcastFlagsI+0xc>
}
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0000      	movs	r0, r0
	...

08002a10 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <chEvtWaitAnyTimeout+0x44>)
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 8002a12:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002a14:	699e      	ldr	r6, [r3, #24]
 8002a16:	2320      	movs	r3, #32
 8002a18:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002a1c:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002a1e:	ea13 0500 	ands.w	r5, r3, r0
 8002a22:	d10e      	bne.n	8002a42 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == timeout) {
 8002a24:	b919      	cbnz	r1, 8002a2e <chEvtWaitAnyTimeout+0x1e>
 8002a26:	f385 8811 	msr	BASEPRI, r5
  }
  ctp->epending &= ~m;
  chSysUnlock();

  return m;
}
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
    ctp->u.ewmask = events;
 8002a2e:	6270      	str	r0, [r6, #36]	; 0x24
 8002a30:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002a32:	200a      	movs	r0, #10
 8002a34:	f7ff fdb4 	bl	80025a0 <chSchGoSleepTimeoutS>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	dbf4      	blt.n	8002a26 <chEvtWaitAnyTimeout+0x16>
    m = ctp->epending & events;
 8002a3c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002a3e:	ea03 0504 	and.w	r5, r3, r4
  ctp->epending &= ~m;
 8002a42:	ea23 0305 	bic.w	r3, r3, r5
 8002a46:	6373      	str	r3, [r6, #52]	; 0x34
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f383 8811 	msr	BASEPRI, r3
}
 8002a4e:	4628      	mov	r0, r5
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	bf00      	nop
 8002a54:	20000990 	.word	0x20000990
	...

08002a60 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8002a60:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <_core_init+0xc>)
 8002a62:	4903      	ldr	r1, [pc, #12]	; (8002a70 <_core_init+0x10>)
  ch_memcore.endmem  = __heap_end__;
 8002a64:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <_core_init+0x14>)
 8002a66:	e9c3 1200 	strd	r1, r2, [r3]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8002a6a:	4770      	bx	lr
 8002a6c:	20000a04 	.word	0x20000a04
 8002a70:	20001400 	.word	0x20001400
 8002a74:	20005000 	.word	0x20005000
	...

08002a80 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8002a80:	b430      	push	{r4, r5}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a82:	4c0b      	ldr	r4, [pc, #44]	; (8002ab0 <chCoreAllocAlignedWithOffsetI+0x30>)
  size = MEM_ALIGN_NEXT(size, align);
 8002a84:	3801      	subs	r0, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a86:	6825      	ldr	r5, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8002a88:	1843      	adds	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a8a:	18a8      	adds	r0, r5, r2
 8002a8c:	3801      	subs	r0, #1
 8002a8e:	4408      	add	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8002a90:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a92:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8002a94:	4019      	ands	r1, r3
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002a96:	6863      	ldr	r3, [r4, #4]
  next = p + size;
 8002a98:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002a9a:	428b      	cmp	r3, r1
 8002a9c:	d304      	bcc.n	8002aa8 <chCoreAllocAlignedWithOffsetI+0x28>
 8002a9e:	428d      	cmp	r5, r1
 8002aa0:	d802      	bhi.n	8002aa8 <chCoreAllocAlignedWithOffsetI+0x28>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8002aa2:	6021      	str	r1, [r4, #0]

  return p;
}
 8002aa4:	bc30      	pop	{r4, r5}
 8002aa6:	4770      	bx	lr
    return NULL;
 8002aa8:	2000      	movs	r0, #0
}
 8002aaa:	bc30      	pop	{r4, r5}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000a04 	.word	0x20000a04
	...

08002ac0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8002ac0:	b470      	push	{r4, r5, r6}
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002ac8:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <chCoreAllocAlignedWithOffset+0x40>)
 8002aca:	1e4d      	subs	r5, r1, #1
 8002acc:	6826      	ldr	r6, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8002ace:	1943      	adds	r3, r0, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002ad0:	18b0      	adds	r0, r6, r2
  size = MEM_ALIGN_NEXT(size, align);
 8002ad2:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002ad4:	4428      	add	r0, r5
  size = MEM_ALIGN_NEXT(size, align);
 8002ad6:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002ad8:	4008      	ands	r0, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002ada:	6862      	ldr	r2, [r4, #4]
  next = p + size;
 8002adc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d807      	bhi.n	8002af2 <chCoreAllocAlignedWithOffset+0x32>
 8002ae2:	429e      	cmp	r6, r3
 8002ae4:	d805      	bhi.n	8002af2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8002ae6:	6023      	str	r3, [r4, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8002aee:	bc70      	pop	{r4, r5, r6}
 8002af0:	4770      	bx	lr
    return NULL;
 8002af2:	2000      	movs	r0, #0
 8002af4:	2300      	movs	r3, #0
 8002af6:	f383 8811 	msr	BASEPRI, r3
}
 8002afa:	bc70      	pop	{r4, r5, r6}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000a04 	.word	0x20000a04
	...

08002b10 <_heap_init>:
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
  H_NEXT(&default_heap.header) = NULL;
 8002b10:	2200      	movs	r2, #0
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <_heap_init+0x14>)
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <_heap_init+0x18>)
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8002b16:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 8002b1a:	e9c3 2201 	strd	r2, r2, [r3, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002b1e:	6019      	str	r1, [r3, #0]
  chMtxObjectInit(&default_heap.mtx);
 8002b20:	f7ff bf0e 	b.w	8002940 <chMtxObjectInit>
 8002b24:	20000a0c 	.word	0x20000a0c
 8002b28:	08002ac1 	.word	0x08002ac1
 8002b2c:	00000000 	.word	0x00000000

08002b30 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8002b30:	b410      	push	{r4}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8002b32:	2400      	movs	r4, #0
  mp->object_size = size;
  mp->align = align;
 8002b34:	e9c0 1201 	strd	r1, r2, [r0, #4]
  mp->next = NULL;
 8002b38:	6004      	str	r4, [r0, #0]
  mp->provider = provider;
 8002b3a:	60c3      	str	r3, [r0, #12]
}
 8002b3c:	bc10      	pop	{r4}
 8002b3e:	4770      	bx	lr

08002b40 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	f7ff bf9d 	b.w	8002a80 <chCoreAllocAlignedWithOffsetI>
 8002b46:	bf00      	nop
	...

08002b50 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8002b50:	b570      	push	{r4, r5, r6, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8002b52:	4c11      	ldr	r4, [pc, #68]	; (8002b98 <_factory_init+0x48>)
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8002b54:	4d11      	ldr	r5, [pc, #68]	; (8002b9c <_factory_init+0x4c>)
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fef2 	bl	8002940 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8002b5c:	f104 0610 	add.w	r6, r4, #16
 8002b60:	462b      	mov	r3, r5
 8002b62:	f104 0014 	add.w	r0, r4, #20
 8002b66:	2204      	movs	r2, #4
 8002b68:	2114      	movs	r1, #20
 8002b6a:	6126      	str	r6, [r4, #16]
 8002b6c:	f7ff ffe0 	bl	8002b30 <chPoolObjectInitAligned>
 8002b70:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8002b74:	462b      	mov	r3, r5
 8002b76:	2204      	movs	r2, #4
 8002b78:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002b7c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002b80:	211c      	movs	r1, #28
 8002b82:	e9c4 6509 	strd	r6, r5, [r4, #36]	; 0x24
 8002b86:	f7ff ffd3 	bl	8002b30 <chPoolObjectInitAligned>
 8002b8a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8002b8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002b92:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  dyn_list_init(&ch_factory.mbx_list);
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
#endif
}
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	20000a28 	.word	0x20000a28
 8002b9c:	08002b41 	.word	0x08002b41

08002ba0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002ba0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002ba4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002ba6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002baa:	2300      	movs	r3, #0
 8002bac:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
	...

08002bc0 <_port_irq_epilogue>:
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <_port_irq_epilogue+0x44>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002bce:	d102      	bne.n	8002bd6 <_port_irq_epilogue+0x16>
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8002bd6:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002bd8:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp--;
 8002be0:	f1a4 0320 	sub.w	r3, r4, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 8002be4:	f844 2c04 	str.w	r2, [r4, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002be8:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002bec:	f7ff fd30 	bl	8002650 <chSchIsPreemptionRequired>
 8002bf0:	b118      	cbz	r0, 8002bfa <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <_port_irq_epilogue+0x48>)
 8002bf4:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8002bf8:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <_port_irq_epilogue+0x4c>)
 8002bfc:	f844 3c08 	str.w	r3, [r4, #-8]
}
 8002c00:	bd10      	pop	{r4, pc}
 8002c02:	bf00      	nop
 8002c04:	e000ed00 	.word	0xe000ed00
 8002c08:	08000261 	.word	0x08000261
 8002c0c:	08000264 	.word	0x08000264

08002c10 <motor_ctrl_thread>:
const float integral_limit_2 = 20000;


static THD_WORKING_AREA(motor_ctrl_thread_wa,512);
static THD_FUNCTION(motor_ctrl_thread, p)
{
 8002c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c14:	b084      	sub	sp, #16
    (void) p;

    float init_angle;
    float out = 0;
    init_angle = turret_init();
 8002c16:	f000 fadb 	bl	80031d0 <turret_init>

    // angle_pid_control
    pid_init(&pid_angle,
 8002c1a:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8002c1e:	4d20      	ldr	r5, [pc, #128]	; (8002ca0 <motor_ctrl_thread+0x90>)
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <motor_ctrl_thread+0x94>)
 8002c22:	4623      	mov	r3, r4
 8002c24:	9400      	str	r4, [sp, #0]
 8002c26:	9202      	str	r2, [sp, #8]
 8002c28:	9501      	str	r5, [sp, #4]
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <motor_ctrl_thread+0x98>)
 8002c2c:	491f      	ldr	r1, [pc, #124]	; (8002cac <motor_ctrl_thread+0x9c>)
    init_angle = turret_init();
 8002c2e:	4680      	mov	r8, r0
    pid_init(&pid_angle,
 8002c30:	481f      	ldr	r0, [pc, #124]	; (8002cb0 <motor_ctrl_thread+0xa0>)
 8002c32:	f000 fa65 	bl	8003100 <pid_init>
             kp_1, ki_1, kd_1, dt_1,
             output_limit_1,
             integral_limit_1);

    //speed_pid_control
    pid_init(&pid_speed,
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <motor_ctrl_thread+0xa4>)
 8002c38:	9501      	str	r5, [sp, #4]
 8002c3a:	9400      	str	r4, [sp, #0]
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <motor_ctrl_thread+0xa8>)
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <motor_ctrl_thread+0xac>)
 8002c42:	491f      	ldr	r1, [pc, #124]	; (8002cc0 <motor_ctrl_thread+0xb0>)
 8002c44:	481f      	ldr	r0, [pc, #124]	; (8002cc4 <motor_ctrl_thread+0xb4>)
 8002c46:	f000 fa5b 	bl	8003100 <pid_init>
 8002c4a:	4f1f      	ldr	r7, [pc, #124]	; (8002cc8 <motor_ctrl_thread+0xb8>)


    while(true)
    {

      out = turret_output(&pid_angle,&pid_speed,
 8002c4c:	4e1f      	ldr	r6, [pc, #124]	; (8002ccc <motor_ctrl_thread+0xbc>)
 8002c4e:	4d20      	ldr	r5, [pc, #128]	; (8002cd0 <motor_ctrl_thread+0xc0>)
 8002c50:	4c1c      	ldr	r4, [pc, #112]	; (8002cc4 <motor_ctrl_thread+0xb4>)
 8002c52:	e003      	b.n	8002c5c <motor_ctrl_thread+0x4c>
      if (rc->channel3 < 600)
        can_motorSetCurrent(
                  0x200,
                  0,0,0,0);

      else if (rc->channel3 > 600)
 8002c54:	d118      	bne.n	8002c88 <motor_ctrl_thread+0x78>
        can_motorSetCurrent(
                0x200,
                out,0,0,0);

      chThdSleepMilliseconds(dt_1);
 8002c56:	2002      	movs	r0, #2
 8002c58:	f7ff fe12 	bl	8002880 <chThdSleep>
      out = turret_output(&pid_angle,&pid_speed,
 8002c5c:	4633      	mov	r3, r6
 8002c5e:	f8cd 8000 	str.w	r8, [sp]
 8002c62:	462a      	mov	r2, r5
 8002c64:	4621      	mov	r1, r4
 8002c66:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <motor_ctrl_thread+0xa0>)
 8002c68:	f000 fb22 	bl	80032b0 <turret_output>
      if (rc->channel3 < 600)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	88db      	ldrh	r3, [r3, #6]
 8002c70:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002c74:	d2ee      	bcs.n	8002c54 <motor_ctrl_thread+0x44>
        can_motorSetCurrent(
 8002c76:	2300      	movs	r3, #0
 8002c78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	f000 f9c5 	bl	8003010 <can_motorSetCurrent>
 8002c86:	e7e6      	b.n	8002c56 <motor_ctrl_thread+0x46>
        can_motorSetCurrent(
 8002c88:	f7fe fa40 	bl	800110c <__aeabi_f2iz>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	b201      	sxth	r1, r0
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c98:	f000 f9ba 	bl	8003010 <can_motorSetCurrent>
 8002c9c:	e7db      	b.n	8002c56 <motor_ctrl_thread+0x46>
 8002c9e:	bf00      	nop
 8002ca0:	46ea6000 	.word	0x46ea6000
 8002ca4:	461c4000 	.word	0x461c4000
 8002ca8:	3a83126f 	.word	0x3a83126f
 8002cac:	42200000 	.word	0x42200000
 8002cb0:	20000d38 	.word	0x20000d38
 8002cb4:	469c4000 	.word	0x469c4000
 8002cb8:	3a9d4952 	.word	0x3a9d4952
 8002cbc:	3d8f5c29 	.word	0x3d8f5c29
 8002cc0:	3c23d70a 	.word	0x3c23d70a
 8002cc4:	20000d68 	.word	0x20000d68
 8002cc8:	20000d98 	.word	0x20000d98
 8002ccc:	20000800 	.word	0x20000800
 8002cd0:	20000a6c 	.word	0x20000a6c
	...

08002ce0 <main>:

/*
 * Application entry point.
 */
int main(void)
{
 8002ce0:	b500      	push	{lr}
 8002ce2:	b083      	sub	sp, #12
    * - HAL initialization, this also initializes the configured device drivers
    *   and performs the board-specific initializations.
    * - Kernel initialization, the main() function becomes a thread and the
    *   RTOS is active.
    */
    halInit();
 8002ce4:	f7fe fa8c 	bl	8001200 <halInit>
    chSysInit();
 8002ce8:	f7ff fa8a 	bl	8002200 <chSysInit>
    RC_init();
 8002cec:	f000 f8c0 	bl	8002e70 <RC_init>
    can_processInit();
 8002cf0:	f000 f9c6 	bl	8003080 <can_processInit>
    rc = RC_get();
 8002cf4:	f000 f8b4 	bl	8002e60 <RC_get>

    chThdCreateStatic(motor_ctrl_thread_wa,
 8002cf8:	2200      	movs	r2, #0
    rc = RC_get();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <main+0x44>)
    chThdCreateStatic(motor_ctrl_thread_wa,
 8002cfc:	9200      	str	r2, [sp, #0]
 8002cfe:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    rc = RC_get();
 8002d02:	6018      	str	r0, [r3, #0]
    chThdCreateStatic(motor_ctrl_thread_wa,
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <main+0x48>)
 8002d08:	4808      	ldr	r0, [pc, #32]	; (8002d2c <main+0x4c>)
 8002d0a:	f7ff fd49 	bl	80027a0 <chThdCreateStatic>
    /*
    * Normal main() thread activity
    */
    while (true)
    {
        palTogglePad(GPIOA, GPIOA_LED);
 8002d0e:	4c08      	ldr	r4, [pc, #32]	; (8002d30 <main+0x50>)
 8002d10:	68e3      	ldr	r3, [r4, #12]
        chThdSleepMilliseconds(500);
 8002d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        palTogglePad(GPIOA, GPIOA_LED);
 8002d16:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8002d1a:	60e3      	str	r3, [r4, #12]
        chThdSleepMilliseconds(500);
 8002d1c:	f7ff fdb0 	bl	8002880 <chThdSleep>
 8002d20:	e7f6      	b.n	8002d10 <main+0x30>
 8002d22:	bf00      	nop
 8002d24:	20000d98 	.word	0x20000d98
 8002d28:	08002c11 	.word	0x08002c11
 8002d2c:	20000a70 	.word	0x20000a70
 8002d30:	40010800 	.word	0x40010800
	...

08002d40 <uart_dbus_thread>:

#define  DBUS_INIT_WAIT_TIME_MS      4U
#define  DBUS_WAIT_TIME_MS         100U
static THD_WORKING_AREA(uart_dbus_thread_wa, 512);
static THD_FUNCTION(uart_dbus_thread, p)
{
 8002d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8002d44:	4f37      	ldr	r7, [pc, #220]	; (8002e24 <uart_dbus_thread+0xe4>)
 8002d46:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <uart_dbus_thread+0xe8>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
    systime_t timeout = TIME_MS2I(DBUS_INIT_WAIT_TIME_MS);
    uint32_t count = 0;

    while(!chThdShouldTerminateX())
    {
        uartStopReceive(UART_DBUS);
 8002d4a:	4e38      	ldr	r6, [pc, #224]	; (8002e2c <uart_dbus_thread+0xec>)
 8002d4c:	619a      	str	r2, [r3, #24]
        uartStartReceive(UART_DBUS, DBUS_BUFFER_SIZE, rxbuf);
 8002d4e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8002e30 <uart_dbus_thread+0xf0>

        chSysLock();
        rxmsg = chThdSuspendTimeoutS(&uart_dbus_thread_handler, TIME_INFINITE);
 8002d52:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8002e3c <uart_dbus_thread+0xfc>
    while(!chThdShouldTerminateX())
 8002d56:	e004      	b.n	8002d62 <uart_dbus_thread+0x22>
        chSysUnlock();

        if(rxmsg == MSG_OK)
        {
            if(!rc_state)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	bb52      	cbnz	r2, 8002db2 <uart_dbus_thread+0x72>
            {
                timeout = TIME_MS2I(DBUS_WAIT_TIME_MS);
                rc_state = RC_UNLOCKED;
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	69bb      	ldr	r3, [r7, #24]
    while(!chThdShouldTerminateX())
 8002d62:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8002d66:	f004 0404 	and.w	r4, r4, #4
 8002d6a:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8002d6e:	b9f4      	cbnz	r4, 8002dae <uart_dbus_thread+0x6e>
        uartStopReceive(UART_DBUS);
 8002d70:	4630      	mov	r0, r6
 8002d72:	f7fe fb35 	bl	80013e0 <uartStopReceive>
        uartStartReceive(UART_DBUS, DBUS_BUFFER_SIZE, rxbuf);
 8002d76:	4a2e      	ldr	r2, [pc, #184]	; (8002e30 <uart_dbus_thread+0xf0>)
 8002d78:	2112      	movs	r1, #18
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7fe fb20 	bl	80013c0 <uartStartReceive>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d80:	f04f 0a20 	mov.w	sl, #32
 8002d84:	f38a 8811 	msr	BASEPRI, sl
        rxmsg = chThdSuspendTimeoutS(&uart_dbus_thread_handler, TIME_INFINITE);
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	f7ff fd87 	bl	80028a0 <chThdSuspendTimeoutS>
 8002d92:	f385 8811 	msr	BASEPRI, r5
            if(!rc_state)
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <uart_dbus_thread+0xf4>)
        if(rxmsg == MSG_OK)
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d0dd      	beq.n	8002d58 <uart_dbus_thread+0x18>
    RC_Ctl.channel0 = 1024;
 8002d9c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <uart_dbus_thread+0xf8>)
                chSysUnlock();
            }
        }
        else
        {
            rc_state = RC_UNCONNECTED;
 8002da2:	4924      	ldr	r1, [pc, #144]	; (8002e34 <uart_dbus_thread+0xf4>)
    RC_Ctl.channel1 = 1024;
 8002da4:	e9c3 2200 	strd	r2, r2, [r3]
    RC_Ctl.channel3 = 1024;
 8002da8:	811d      	strh	r5, [r3, #8]
            rc_state = RC_UNCONNECTED;
 8002daa:	700c      	strb	r4, [r1, #0]
 8002dac:	e7d8      	b.n	8002d60 <uart_dbus_thread+0x20>
            RC_reset();
            timeout = TIME_MS2I(DBUS_INIT_WAIT_TIME_MS);
        }
    }
}
 8002dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db2:	f38a 8811 	msr	BASEPRI, sl
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8002db6:	f899 4002 	ldrb.w	r4, [r9, #2]
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 8002dba:	f899 1003 	ldrb.w	r1, [r9, #3]
 8002dbe:	09a5      	lsrs	r5, r4, #6
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8002dc0:	f899 3001 	ldrb.w	r3, [r9, #1]
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 8002dc4:	f899 2005 	ldrb.w	r2, [r9, #5]
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 8002dc8:	f899 e004 	ldrb.w	lr, [r9, #4]
 8002dcc:	ea45 0581 	orr.w	r5, r5, r1, lsl #2
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8002dd0:	f899 1000 	ldrb.w	r1, [r9]
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8002dd4:	0164      	lsls	r4, r4, #5
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8002dd6:	f8df c060 	ldr.w	ip, [pc, #96]	; 8002e38 <uart_dbus_thread+0xf8>
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 8002dda:	ea45 258e 	orr.w	r5, r5, lr, lsl #10
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8002dde:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8002de2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 8002de6:	01d3      	lsls	r3, r2, #7
 8002de8:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
	RC_Ctl.s1 = ((rxbuf[5] >> 4)& 0x000C) >> 2;
 8002dec:	0912      	lsrs	r2, r2, #4
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 8002dee:	f3c5 050a 	ubfx	r5, r5, #0, #11
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 8002df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8002df6:	f3c4 040a 	ubfx	r4, r4, #0, #11
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8002dfa:	f3c1 010a 	ubfx	r1, r1, #0, #11
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 8002dfe:	f8ac 5004 	strh.w	r5, [ip, #4]
	RC_Ctl.s1 = ((rxbuf[5] >> 4)& 0x000C) >> 2;
 8002e02:	1095      	asrs	r5, r2, #2
	RC_Ctl.s2 = ((rxbuf[5] >> 4)& 0x0003);
 8002e04:	f002 0203 	and.w	r2, r2, #3
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 8002e08:	f8ac 3006 	strh.w	r3, [ip, #6]
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8002e0c:	f8ac 4002 	strh.w	r4, [ip, #2]
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8002e10:	f8ac 1000 	strh.w	r1, [ip]
	RC_Ctl.s1 = ((rxbuf[5] >> 4)& 0x000C) >> 2;
 8002e14:	f88c 5008 	strb.w	r5, [ip, #8]
	RC_Ctl.s2 = ((rxbuf[5] >> 4)& 0x0003);
 8002e18:	f88c 2009 	strb.w	r2, [ip, #9]
 8002e1c:	f380 8811 	msr	BASEPRI, r0
 8002e20:	e79e      	b.n	8002d60 <uart_dbus_thread+0x20>
 8002e22:	bf00      	nop
 8002e24:	20000990 	.word	0x20000990
 8002e28:	080035b8 	.word	0x080035b8
 8002e2c:	20000898 	.word	0x20000898
 8002e30:	20000da8 	.word	0x20000da8
 8002e34:	20000da6 	.word	0x20000da6
 8002e38:	20000d9c 	.word	0x20000d9c
 8002e3c:	20000dbc 	.word	0x20000dbc

08002e40 <rxend>:
{
 8002e40:	b508      	push	{r3, lr}
 8002e42:	2320      	movs	r3, #32
 8002e44:	f383 8811 	msr	BASEPRI, r3
    chThdResumeI(&uart_dbus_thread_handler, MSG_OK);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4803      	ldr	r0, [pc, #12]	; (8002e58 <rxend+0x18>)
 8002e4c:	f7ff fd38 	bl	80028c0 <chThdResumeI>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f383 8811 	msr	BASEPRI, r3
}
 8002e56:	bd08      	pop	{r3, pc}
 8002e58:	20000dbc 	.word	0x20000dbc
 8002e5c:	00000000 	.word	0x00000000

08002e60 <RC_get>:
}
 8002e60:	4800      	ldr	r0, [pc, #0]	; (8002e64 <RC_get+0x4>)
 8002e62:	4770      	bx	lr
 8002e64:	20000d9c 	.word	0x20000d9c
	...

08002e70 <RC_init>:

/**
 * @brief   Initialize the RC receiver
 */
void RC_init(void)
{
 8002e70:	b530      	push	{r4, r5, lr}
    RC_Ctl.channel0 = 1024;
 8002e72:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
    RC_Ctl.channel3 = 1024;
 8002e76:	2400      	movs	r4, #0
    RC_Ctl.channel0 = 1024;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <RC_init+0x38>)
    RC_reset();

    uartStart(UART_DBUS, &uart_cfg);
 8002e7a:	4d0c      	ldr	r5, [pc, #48]	; (8002eac <RC_init+0x3c>)
{
 8002e7c:	b083      	sub	sp, #12
    RC_Ctl.channel1 = 1024;
 8002e7e:	e9c3 2200 	strd	r2, r2, [r3]
    RC_Ctl.channel3 = 1024;
 8002e82:	811c      	strh	r4, [r3, #8]
    uartStart(UART_DBUS, &uart_cfg);
 8002e84:	4628      	mov	r0, r5
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <RC_init+0x40>)
 8002e88:	f7fe fa8a 	bl	80013a0 <uartStart>
    dmaStreamRelease(*UART_DBUS.dmatx);
 8002e8c:	6968      	ldr	r0, [r5, #20]
 8002e8e:	f7fe ff67 	bl	8001d60 <dmaStreamRelease>

    chThdCreateStatic(uart_dbus_thread_wa, sizeof(uart_dbus_thread_wa),
 8002e92:	9400      	str	r4, [sp, #0]
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <RC_init+0x44>)
 8002e96:	2287      	movs	r2, #135	; 0x87
 8002e98:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8002e9c:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <RC_init+0x48>)
 8002e9e:	f7ff fc7f 	bl	80027a0 <chThdCreateStatic>
                    NORMALPRIO + 7,
                    uart_dbus_thread, NULL);
}
 8002ea2:	b003      	add	sp, #12
 8002ea4:	bd30      	pop	{r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000d9c 	.word	0x20000d9c
 8002eac:	20000898 	.word	0x20000898
 8002eb0:	20000804 	.word	0x20000804
 8002eb4:	08002d41 	.word	0x08002d41
 8002eb8:	20000dc0 	.word	0x20000dc0
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <can_processEncoder>:


#define CAN_ENCODER_RADIAN_RATIO    7.669904e-4f    // 2*M_PI / 0x2000
static void can_processEncoder
  (volatile Encoder_canStruct* cm, const CANRxFrame* const rxmsg)
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4604      	mov	r4, r0
  uint16_t prev_angle = cm->angle_rotor_raw;
 8002ec4:	8800      	ldrh	r0, [r0, #0]
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	b280      	uxth	r0, r0
 8002eca:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  cm->updated = true;
 8002ece:	2501      	movs	r5, #1
  cm->angle_rotor_raw = (uint16_t)(rxmsg->data8[0]) << 8 | rxmsg->data8[1];
  cm->speed_rpm       = (int16_t)(rxmsg->data8[2]) << 8 | rxmsg->data8[3];
 8002ed0:	7c8e      	ldrb	r6, [r1, #18]
  cm->angle_rotor_raw = (uint16_t)(rxmsg->data8[0]) << 8 | rxmsg->data8[1];
 8002ed2:	7c0b      	ldrb	r3, [r1, #16]
  cm->speed_rpm       = (int16_t)(rxmsg->data8[2]) << 8 | rxmsg->data8[3];
 8002ed4:	7cca      	ldrb	r2, [r1, #19]
  cm->updated = true;
 8002ed6:	7525      	strb	r5, [r4, #20]
  cm->angle_rotor_raw = (uint16_t)(rxmsg->data8[0]) << 8 | rxmsg->data8[1];
 8002ed8:	7c4d      	ldrb	r5, [r1, #17]
  cm->speed_rpm       = (int16_t)(rxmsg->data8[2]) << 8 | rxmsg->data8[3];
 8002eda:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  cm->angle_rotor_raw = (uint16_t)(rxmsg->data8[0]) << 8 | rxmsg->data8[1];
 8002ede:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  cm->current_raw     = (int16_t)(rxmsg->data8[4]) << 8 | rxmsg->data8[5];
 8002ee2:	7d0e      	ldrb	r6, [r1, #20]
 8002ee4:	7d4b      	ldrb	r3, [r1, #21]
  cm->temperature     = (uint8_t)rxmsg->data8[6];
 8002ee6:	7d89      	ldrb	r1, [r1, #22]
  cm->current_raw     = (int16_t)(rxmsg->data8[4]) << 8 | rxmsg->data8[5];
 8002ee8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8002eec:	b21b      	sxth	r3, r3
  cm->speed_rpm       = (int16_t)(rxmsg->data8[2]) << 8 | rxmsg->data8[3];
 8002eee:	b212      	sxth	r2, r2
  cm->angle_rotor_raw = (uint16_t)(rxmsg->data8[0]) << 8 | rxmsg->data8[1];
 8002ef0:	8025      	strh	r5, [r4, #0]
  cm->speed_rpm       = (int16_t)(rxmsg->data8[2]) << 8 | rxmsg->data8[3];
 8002ef2:	8062      	strh	r2, [r4, #2]
  cm->current_raw     = (int16_t)(rxmsg->data8[4]) << 8 | rxmsg->data8[5];
 8002ef4:	80a3      	strh	r3, [r4, #4]
  cm->temperature     = (uint8_t)rxmsg->data8[6];
 8002ef6:	71a1      	strb	r1, [r4, #6]

  if      (cm->angle_rotor_raw - prev_angle >  CAN_ENCODER_RANGE / 2) cm->round_count--;
 8002ef8:	8823      	ldrh	r3, [r4, #0]
 8002efa:	1a1b      	subs	r3, r3, r0
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f00:	dc17      	bgt.n	8002f32 <can_processEncoder+0x72>
  else if (cm->angle_rotor_raw - prev_angle < -CAN_ENCODER_RANGE / 2) cm->round_count++;
 8002f02:	8823      	ldrh	r3, [r4, #0]
 8002f04:	1a18      	subs	r0, r3, r0
 8002f06:	f510 5f80 	cmn.w	r0, #4096	; 0x1000
 8002f0a:	da02      	bge.n	8002f12 <can_processEncoder+0x52>
 8002f0c:	68a3      	ldr	r3, [r4, #8]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60a3      	str	r3, [r4, #8]

  cm->total_ecd = cm->round_count * CAN_ENCODER_RANGE + cm->angle_rotor_raw;
 8002f12:	68a2      	ldr	r2, [r4, #8]
 8002f14:	8823      	ldrh	r3, [r4, #0]
 8002f16:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002f1a:	60e3      	str	r3, [r4, #12]
  cm->radian_angle = cm->total_ecd * CAN_ENCODER_RADIAN_RATIO;
 8002f1c:	68e0      	ldr	r0, [r4, #12]
 8002f1e:	f7fd fedb 	bl	8000cd8 <__aeabi_i2f>
 8002f22:	4906      	ldr	r1, [pc, #24]	; (8002f3c <can_processEncoder+0x7c>)
 8002f24:	f7fd ff2c 	bl	8000d80 <__aeabi_fmul>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6120      	str	r0, [r4, #16]
 8002f2c:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
}
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
  if      (cm->angle_rotor_raw - prev_angle >  CAN_ENCODER_RANGE / 2) cm->round_count--;
 8002f32:	68a3      	ldr	r3, [r4, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60a3      	str	r3, [r4, #8]
 8002f38:	e7eb      	b.n	8002f12 <can_processEncoder+0x52>
 8002f3a:	bf00      	nop
 8002f3c:	3a490fdb 	.word	0x3a490fdb

08002f40 <can_rx>:

/*
 * Receiver thread.
 */
static THD_WORKING_AREA(can_rx1_wa, 256);
static THD_FUNCTION(can_rx, p) {
 8002f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f44:	4d27      	ldr	r5, [pc, #156]	; (8002fe4 <can_rx+0xa4>)
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <can_rx+0xa8>)
 8002f48:	69ab      	ldr	r3, [r5, #24]
 8002f4a:	b08d      	sub	sp, #52	; 0x34
  event_listener_t el;
  CANRxFrame rxmsg;

  (void)p;
  chRegSetThreadName("can receiver");
  chEvtRegister(&canp->rxfull_event, &el, 0);
 8002f4c:	f100 0918 	add.w	r9, r0, #24
 8002f50:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(can_rx, p) {
 8002f52:	4604      	mov	r4, r0
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8002f54:	a901      	add	r1, sp, #4
 8002f56:	4648      	mov	r0, r9
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f7ff fcf7 	bl	8002950 <chEvtRegisterMaskWithFlags>
             can_processEncoder(&_encoder[BL_WHEEL], rxmsg);
 8002f62:	4e22      	ldr	r6, [pc, #136]	; (8002fec <can_rx+0xac>)
             can_processEncoder(&_encoder[BR_WHEEL], rxmsg);
 8002f64:	f1a6 0818 	sub.w	r8, r6, #24
             can_processEncoder(&_encoder[FR_WHEEL], rxmsg);
 8002f68:	f1a6 0730 	sub.w	r7, r6, #48	; 0x30
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002f6c:	69ab      	ldr	r3, [r5, #24]
  while(!chThdShouldTerminateX())
 8002f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f72:	075b      	lsls	r3, r3, #29
 8002f74:	d42f      	bmi.n	8002fd6 <can_rx+0x96>
  {
    if (chEvtWaitAnyTimeout(ALL_EVENTS, TIME_MS2I(100)) == 0)
 8002f76:	21c8      	movs	r1, #200	; 0xc8
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f7ff fd48 	bl	8002a10 <chEvtWaitAnyTimeout>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d0f3      	beq.n	8002f6c <can_rx+0x2c>
      continue;
    while (canReceive(canp, CAN_ANY_MAILBOX,
 8002f84:	2300      	movs	r3, #0
 8002f86:	aa06      	add	r2, sp, #24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7fe f9d0 	bl	8001330 <canReceiveTimeout>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d1eb      	bne.n	8002f6c <can_rx+0x2c>
    switch(rxmsg->SID)
 8002f94:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa0:	4413      	add	r3, r2
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d8ee      	bhi.n	8002f84 <can_rx+0x44>
 8002fa6:	e8df f003 	tbb	[pc, r3]
 8002faa:	0c11      	.short	0x0c11
 8002fac:	0207      	.short	0x0207
             can_processEncoder(&_encoder[BL_WHEEL], rxmsg);
 8002fae:	a906      	add	r1, sp, #24
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f7ff ff85 	bl	8002ec0 <can_processEncoder>
 8002fb6:	e7e5      	b.n	8002f84 <can_rx+0x44>
             can_processEncoder(&_encoder[BR_WHEEL], rxmsg);
 8002fb8:	a906      	add	r1, sp, #24
 8002fba:	4640      	mov	r0, r8
 8002fbc:	f7ff ff80 	bl	8002ec0 <can_processEncoder>
 8002fc0:	e7e0      	b.n	8002f84 <can_rx+0x44>
             can_processEncoder(&_encoder[FR_WHEEL], rxmsg);
 8002fc2:	a906      	add	r1, sp, #24
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	f7ff ff7b 	bl	8002ec0 <can_processEncoder>
 8002fca:	e7db      	b.n	8002f84 <can_rx+0x44>
            can_processEncoder(&_encoder[FL_WHEEL], rxmsg);
 8002fcc:	a906      	add	r1, sp, #24
 8002fce:	4808      	ldr	r0, [pc, #32]	; (8002ff0 <can_rx+0xb0>)
 8002fd0:	f7ff ff76 	bl	8002ec0 <can_processEncoder>
 8002fd4:	e7d6      	b.n	8002f84 <can_rx+0x44>
                      &rxmsg, TIME_IMMEDIATE) == MSG_OK)
    {
      can_processEncoderMessage(&rxmsg);
    }
  }
  chEvtUnregister(&canp->rxfull_event, &el);
 8002fd6:	a901      	add	r1, sp, #4
 8002fd8:	4648      	mov	r0, r9
 8002fda:	f7ff fcd1 	bl	8002980 <chEvtUnregister>
}
 8002fde:	b00d      	add	sp, #52	; 0x34
 8002fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fe4:	20000990 	.word	0x20000990
 8002fe8:	080035cc 	.word	0x080035cc
 8002fec:	200010d0 	.word	0x200010d0
 8002ff0:	20001088 	.word	0x20001088
	...

08003000 <can_getEncoder>:
}
 8003000:	4800      	ldr	r0, [pc, #0]	; (8003004 <can_getEncoder+0x4>)
 8003002:	4770      	bx	lr
 8003004:	20001088 	.word	0x20001088
	...

08003010 <can_motorSetCurrent>:
  const uint16_t EID,
  const int16_t cm1_iq,
  const int16_t cm2_iq,
  const int16_t cm3_iq,
  const int16_t cm4_iq)
{
 8003010:	b570      	push	{r4, r5, r6, lr}
    CANTxFrame txmsg;

    txmsg.IDE = CAN_IDE_STD;
    txmsg.EID = EID;
    txmsg.RTR = CAN_RTR_DATA;
    txmsg.DLC = 0x08;
 8003012:	2608      	movs	r6, #8
{
 8003014:	b084      	sub	sp, #16
    txmsg.IDE = CAN_IDE_STD;
 8003016:	f89d 4000 	ldrb.w	r4, [sp]
    txmsg.EID = EID;
 800301a:	9d01      	ldr	r5, [sp, #4]
    txmsg.DLC = 0x08;
 800301c:	f004 04cf 	and.w	r4, r4, #207	; 0xcf
 8003020:	f366 0403 	bfi	r4, r6, #0, #4
    txmsg.EID = EID;
 8003024:	f360 051c 	bfi	r5, r0, #0, #29
    txmsg.DLC = 0x08;
 8003028:	f88d 4000 	strb.w	r4, [sp]
    txmsg.EID = EID;
 800302c:	9501      	str	r5, [sp, #4]
{
 800302e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8003032:	2420      	movs	r4, #32
 8003034:	f384 8811 	msr	BASEPRI, r4

    chSysLock();

    //TODO arange data bytes for motor current control
    txmsg.data8[0] = (uint8_t)(cm1_iq >> 8);
 8003038:	fa41 f606 	asr.w	r6, r1, r6
    txmsg.data8[1] = (uint8_t)cm1_iq;

    txmsg.data8[2] = (uint8_t)(cm2_iq >> 8);
 800303c:	1215      	asrs	r5, r2, #8
    txmsg.data8[3] = (uint8_t)cm2_iq;

    txmsg.data8[4] = (uint8_t)(cm3_iq >> 8);
 800303e:	121c      	asrs	r4, r3, #8
    txmsg.data8[1] = (uint8_t)cm1_iq;
 8003040:	f88d 1009 	strb.w	r1, [sp, #9]
    txmsg.data8[5] = (uint8_t)cm3_iq;

    txmsg.data8[6] = (uint8_t)(cm4_iq >> 8);
 8003044:	1201      	asrs	r1, r0, #8
 8003046:	f88d 100e 	strb.w	r1, [sp, #14]
    txmsg.data8[0] = (uint8_t)(cm1_iq >> 8);
 800304a:	f88d 6008 	strb.w	r6, [sp, #8]
    txmsg.data8[3] = (uint8_t)cm2_iq;
 800304e:	f88d 200b 	strb.w	r2, [sp, #11]
    txmsg.data8[2] = (uint8_t)(cm2_iq >> 8);
 8003052:	f88d 500a 	strb.w	r5, [sp, #10]
    txmsg.data8[5] = (uint8_t)cm3_iq;
 8003056:	f88d 300d 	strb.w	r3, [sp, #13]
    txmsg.data8[4] = (uint8_t)(cm3_iq >> 8);
 800305a:	f88d 400c 	strb.w	r4, [sp, #12]
    txmsg.data8[7] = (uint8_t)cm4_iq;
 800305e:	f88d 000f 	strb.w	r0, [sp, #15]
 8003062:	2100      	movs	r1, #0
 8003064:	f381 8811 	msr	BASEPRI, r1

    chSysUnlock();

    canTransmit(&CAND1, CAN_ANY_MAILBOX, &txmsg, TIME_MS2I(100));
 8003068:	23c8      	movs	r3, #200	; 0xc8
 800306a:	466a      	mov	r2, sp
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <can_motorSetCurrent+0x68>)
 800306e:	f7fe f937 	bl	80012e0 <canTransmitTimeout>
}
 8003072:	b004      	add	sp, #16
 8003074:	bd70      	pop	{r4, r5, r6, pc}
 8003076:	bf00      	nop
 8003078:	20000828 	.word	0x20000828
 800307c:	00000000 	.word	0x00000000

08003080 <can_processInit>:


void can_processInit(void)
{
 8003080:	b570      	push	{r4, r5, r6, lr}
  memset((void *)_encoder, 0, sizeof(Encoder_canStruct)*CHASSIS_MOTOR_NUM);
 8003082:	2260      	movs	r2, #96	; 0x60
 8003084:	2100      	movs	r1, #0
{
 8003086:	b082      	sub	sp, #8
  memset((void *)_encoder, 0, sizeof(Encoder_canStruct)*CHASSIS_MOTOR_NUM);
 8003088:	4817      	ldr	r0, [pc, #92]	; (80030e8 <can_processInit+0x68>)
 800308a:	f000 f98f 	bl	80033ac <memset>
 800308e:	2200      	movs	r2, #0
 8003090:	4d16      	ldr	r5, [pc, #88]	; (80030ec <can_processInit+0x6c>)
  {
    canfilter[i].filter = i;
    canfilter[i].mode = 0; //CAN_FilterMode_IdMask
    canfilter[i].scale = 1; //CAN_FilterScale_32bit
    canfilter[i].assignment = 0;
    canfilter[i].register1 = 0;
 8003092:	4616      	mov	r6, r2
 8003094:	4629      	mov	r1, r5
    canfilter[i].filter = i;
 8003096:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800309a:	eb05 0084 	add.w	r0, r5, r4, lsl #2
    canfilter[i].mode = 0; //CAN_FilterMode_IdMask
 800309e:	7883      	ldrb	r3, [r0, #2]
    canfilter[i].filter = i;
 80030a0:	f825 2024 	strh.w	r2, [r5, r4, lsl #2]
    canfilter[i].scale = 1; //CAN_FilterScale_32bit
 80030a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    canfilter[i].assignment = 0;
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	3201      	adds	r2, #1
 80030ae:	f36f 0382 	bfc	r3, #2, #1
  for (i = 0; i < CAN_FILTER_NUM; i++)
 80030b2:	2a1c      	cmp	r2, #28
    canfilter[i].assignment = 0;
 80030b4:	7083      	strb	r3, [r0, #2]
    canfilter[i].register2 = 0;
 80030b6:	e9c1 6601 	strd	r6, r6, [r1, #4]
 80030ba:	f101 010c 	add.w	r1, r1, #12
  for (i = 0; i < CAN_FILTER_NUM; i++)
 80030be:	d1ea      	bne.n	8003096 <can_processInit+0x16>
  }
  canSTM32SetFilters(&CAND1, 14, CAN_FILTER_NUM, canfilter);
 80030c0:	4c0b      	ldr	r4, [pc, #44]	; (80030f0 <can_processInit+0x70>)
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <can_processInit+0x6c>)
 80030c4:	4620      	mov	r0, r4
 80030c6:	210e      	movs	r1, #14
 80030c8:	f7fe fce2 	bl	8001a90 <canSTM32SetFilters>

  canStart(&CAND1, &cancfg);
 80030cc:	4620      	mov	r0, r4
 80030ce:	4909      	ldr	r1, [pc, #36]	; (80030f4 <can_processInit+0x74>)
 80030d0:	f7fe f8f6 	bl	80012c0 <canStart>
  /*
   * Starting the transmitter and receiver threads.
   */
  chThdCreateStatic(can_rx1_wa, sizeof(can_rx1_wa), NORMALPRIO + 7,
 80030d4:	9400      	str	r4, [sp, #0]
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <can_processInit+0x78>)
 80030d8:	2287      	movs	r2, #135	; 0x87
 80030da:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80030de:	4807      	ldr	r0, [pc, #28]	; (80030fc <can_processInit+0x7c>)
 80030e0:	f7ff fb5e 	bl	80027a0 <chThdCreateStatic>
                    can_rx, (void *)&CAND1);
}
 80030e4:	b002      	add	sp, #8
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	20001088 	.word	0x20001088
 80030ec:	200012b0 	.word	0x200012b0
 80030f0:	20000828 	.word	0x20000828
 80030f4:	080035dc 	.word	0x080035dc
 80030f8:	08002f41 	.word	0x08002f41
 80030fc:	200010e8 	.word	0x200010e8

08003100 <pid_init>:
void pid_init(PID_t* pid_struct,
              float kp, float ki, float kd, float dt,
              float output_limit, float integral_limit)
{
  pid_struct->kp = kp;
  pid_struct->ki = ki;
 8003100:	6042      	str	r2, [r0, #4]
  pid_struct->kd = kd;
  pid_struct->dt = dt;
  pid_struct->out = 0.0f;
 8003102:	2200      	movs	r2, #0
{
 8003104:	b430      	push	{r4, r5}
 8003106:	9d02      	ldr	r5, [sp, #8]
 8003108:	9c03      	ldr	r4, [sp, #12]
  pid_struct->kp = kp;
 800310a:	6001      	str	r1, [r0, #0]
{
 800310c:	9904      	ldr	r1, [sp, #16]
  pid_struct->dt = dt;
 800310e:	60c5      	str	r5, [r0, #12]
  pid_struct->pout = 0.0f;
  pid_struct->iout = 0.0f;
  pid_struct->dout = 0.0f;
  pid_struct->error_now = 0.0f;
  pid_struct->error_last = 0.0f;
  pid_struct->output_limit = output_limit;
 8003110:	6284      	str	r4, [r0, #40]	; 0x28
  pid_struct->kd = kd;
 8003112:	6083      	str	r3, [r0, #8]
  pid_struct->integral_limit = integral_limit;
 8003114:	62c1      	str	r1, [r0, #44]	; 0x2c
  pid_struct->out = 0.0f;
 8003116:	6242      	str	r2, [r0, #36]	; 0x24
  pid_struct->pout = 0.0f;
 8003118:	6102      	str	r2, [r0, #16]
  pid_struct->iout = 0.0f;
 800311a:	6142      	str	r2, [r0, #20]
  pid_struct->dout = 0.0f;
 800311c:	6182      	str	r2, [r0, #24]
  pid_struct->error_now = 0.0f;
 800311e:	61c2      	str	r2, [r0, #28]
  pid_struct->error_last = 0.0f;
 8003120:	6202      	str	r2, [r0, #32]
}
 8003122:	bc30      	pop	{r4, r5}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
	...

08003130 <pid_update>:
    else
      return value;
}

void pid_update(PID_t* pid_struct, float set, float get)
{
 8003130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003134:	460b      	mov	r3, r1
 8003136:	4604      	mov	r4, r0
  pid_struct->error_now = set - get;
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fd16 	bl	8000b6c <__aeabi_fsub>

  pid_struct->pout  = pid_struct->kp * pid_struct->error_now;
 8003140:	6821      	ldr	r1, [r4, #0]
  pid_struct->error_now = set - get;
 8003142:	61e0      	str	r0, [r4, #28]
 8003144:	4606      	mov	r6, r0
  pid_struct->pout  = pid_struct->kp * pid_struct->error_now;
 8003146:	f7fd fe1b 	bl	8000d80 <__aeabi_fmul>
  pid_struct->iout += pid_struct->ki * pid_struct->error_now;
 800314a:	6861      	ldr	r1, [r4, #4]
  pid_struct->pout  = pid_struct->kp * pid_struct->error_now;
 800314c:	6120      	str	r0, [r4, #16]
 800314e:	4680      	mov	r8, r0
  pid_struct->iout += pid_struct->ki * pid_struct->error_now;
 8003150:	4630      	mov	r0, r6
 8003152:	f7fd fe15 	bl	8000d80 <__aeabi_fmul>
 8003156:	6961      	ldr	r1, [r4, #20]
 8003158:	f7fd fd0a 	bl	8000b70 <__addsf3>
  pid_struct->dout  = pid_struct->kd * (pid_struct->error_now
        - pid_struct->error_last) / pid_struct->dt;
 800315c:	6a21      	ldr	r1, [r4, #32]
  pid_struct->iout += pid_struct->ki * pid_struct->error_now;
 800315e:	4681      	mov	r9, r0
        - pid_struct->error_last) / pid_struct->dt;
 8003160:	4630      	mov	r0, r6
 8003162:	f7fd fd03 	bl	8000b6c <__aeabi_fsub>
  pid_struct->dout  = pid_struct->kd * (pid_struct->error_now
 8003166:	68a1      	ldr	r1, [r4, #8]
 8003168:	f7fd fe0a 	bl	8000d80 <__aeabi_fmul>
        - pid_struct->error_last) / pid_struct->dt;
 800316c:	68e1      	ldr	r1, [r4, #12]
 800316e:	f7fd febb 	bl	8000ee8 <__aeabi_fdiv>

  pid_struct->iout = limit(pid_struct->integral_limit, pid_struct->iout);
 8003172:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        - pid_struct->error_last) / pid_struct->dt;
 8003174:	4607      	mov	r7, r0
  pid_struct->dout  = pid_struct->kd * (pid_struct->error_now
 8003176:	61a0      	str	r0, [r4, #24]
    if (value > max_value)
 8003178:	4629      	mov	r1, r5
 800317a:	4648      	mov	r0, r9
 800317c:	f7fd ffbc 	bl	80010f8 <__aeabi_fcmpgt>
 8003180:	b930      	cbnz	r0, 8003190 <pid_update+0x60>
    else if (value < -max_value)
 8003182:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003186:	4648      	mov	r0, r9
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd ff97 	bl	80010bc <__aeabi_fcmplt>
 800318e:	b1c0      	cbz	r0, 80031c2 <pid_update+0x92>
  pid_struct->out = pid_struct->pout + pid_struct->iout + pid_struct->dout;
 8003190:	4629      	mov	r1, r5
  pid_struct->iout = limit(pid_struct->integral_limit, pid_struct->iout);
 8003192:	6165      	str	r5, [r4, #20]
  pid_struct->out = pid_struct->pout + pid_struct->iout + pid_struct->dout;
 8003194:	4640      	mov	r0, r8
 8003196:	f7fd fceb 	bl	8000b70 <__addsf3>
 800319a:	4639      	mov	r1, r7
 800319c:	f7fd fce8 	bl	8000b70 <__addsf3>
  pid_struct->error_last = pid_struct->error_now;
  pid_struct->out = limit(pid_struct->output_limit, pid_struct->out);
 80031a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pid_struct->error_last = pid_struct->error_now;
 80031a2:	6226      	str	r6, [r4, #32]
    if (value > max_value)
 80031a4:	4629      	mov	r1, r5
  pid_struct->out = pid_struct->pout + pid_struct->iout + pid_struct->dout;
 80031a6:	4607      	mov	r7, r0
    if (value > max_value)
 80031a8:	f7fd ffa6 	bl	80010f8 <__aeabi_fcmpgt>
 80031ac:	b930      	cbnz	r0, 80031bc <pid_update+0x8c>
    else if (value < -max_value)
 80031ae:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80031b2:	4638      	mov	r0, r7
 80031b4:	4629      	mov	r1, r5
 80031b6:	f7fd ff81 	bl	80010bc <__aeabi_fcmplt>
 80031ba:	b120      	cbz	r0, 80031c6 <pid_update+0x96>
  pid_struct->out = limit(pid_struct->output_limit, pid_struct->out);
 80031bc:	6265      	str	r5, [r4, #36]	; 0x24
  //pid_struct->iout *= 0.999;
}
 80031be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return value;
 80031c2:	464d      	mov	r5, r9
 80031c4:	e7e4      	b.n	8003190 <pid_update+0x60>
 80031c6:	463d      	mov	r5, r7
  pid_struct->out = limit(pid_struct->output_limit, pid_struct->out);
 80031c8:	6265      	str	r5, [r4, #36]	; 0x24
}
 80031ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ce:	bf00      	nop

080031d0 <turret_init>:
  }
}


float turret_init(void)
{
 80031d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float current_rad = encoder->radian_angle;

    can_motorSetCurrent(0x200, -300,0,0,0);
    chThdSleepMilliseconds(1500);

    if(current_rad - previous_rad < 0.1
 80031d4:	f20f 09b0 	addw	r9, pc, #176	; 0xb0
 80031d8:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 80031dc:	b083      	sub	sp, #12
  Encoder_canStruct* encoder = can_getEncoder();
 80031de:	f7ff ff0f 	bl	8003000 <can_getEncoder>
  can_motorSetCurrent(0x200,-550,0,0,0);
 80031e2:	2300      	movs	r3, #0
  float previous_rad = encoder->radian_angle;
 80031e4:	6906      	ldr	r6, [r0, #16]
  can_motorSetCurrent(0x200,-550,0,0,0);
 80031e6:	461a      	mov	r2, r3
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	492b      	ldr	r1, [pc, #172]	; (8003298 <turret_init+0xc8>)
  Encoder_canStruct* encoder = can_getEncoder();
 80031ec:	4682      	mov	sl, r0
  can_motorSetCurrent(0x200,-550,0,0,0);
 80031ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031f2:	f7ff ff0d 	bl	8003010 <can_motorSetCurrent>
  chThdSleepMilliseconds(2000);
 80031f6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80031fa:	f7ff fb41 	bl	8002880 <chThdSleep>
    can_motorSetCurrent(0x200, -300,0,0,0);
 80031fe:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80032a0 <turret_init+0xd0>
 8003202:	e000      	b.n	8003206 <turret_init+0x36>
{
 8003204:	462e      	mov	r6, r5
    can_motorSetCurrent(0x200, -300,0,0,0);
 8003206:	2400      	movs	r4, #0
    float current_rad = encoder->radian_angle;
 8003208:	f8da 5010 	ldr.w	r5, [sl, #16]
    can_motorSetCurrent(0x200, -300,0,0,0);
 800320c:	4623      	mov	r3, r4
 800320e:	4622      	mov	r2, r4
 8003210:	4659      	mov	r1, fp
 8003212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003216:	9400      	str	r4, [sp, #0]
 8003218:	f7ff fefa 	bl	8003010 <can_motorSetCurrent>
    chThdSleepMilliseconds(1500);
 800321c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003220:	f7ff fb2e 	bl	8002880 <chThdSleep>
    if(current_rad - previous_rad < 0.1
 8003224:	4631      	mov	r1, r6
 8003226:	4628      	mov	r0, r5
 8003228:	f7fd fca0 	bl	8000b6c <__aeabi_fsub>
 800322c:	f7fd f980 	bl	8000530 <__aeabi_f2d>
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	4606      	mov	r6, r0
 8003236:	460f      	mov	r7, r1
 8003238:	f7fd fc44 	bl	8000ac4 <__aeabi_dcmplt>
 800323c:	2800      	cmp	r0, #0
 800323e:	d0e1      	beq.n	8003204 <turret_init+0x34>
        && current_rad - previous_rad > -0.1)  // when stop,
 8003240:	a313      	add	r3, pc, #76	; (adr r3, 8003290 <turret_init+0xc0>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	4630      	mov	r0, r6
 8003248:	4639      	mov	r1, r7
 800324a:	f7fd fc59 	bl	8000b00 <__aeabi_dcmpgt>
 800324e:	2800      	cmp	r0, #0
 8003250:	d0d8      	beq.n	8003204 <turret_init+0x34>
    {
      can_motorSetCurrent(0x200,0,0,0,0);
 8003252:	9400      	str	r4, [sp, #0]
 8003254:	4623      	mov	r3, r4
 8003256:	4622      	mov	r2, r4
 8003258:	4621      	mov	r1, r4
 800325a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800325e:	f7ff fed7 	bl	8003010 <can_motorSetCurrent>
 8003262:	240f      	movs	r4, #15

  /*twinkle the LED to indicate the end of the initialization*/
  int iii = 0;
  while (iii < 15)
      {
          palTogglePad(GPIOA, GPIOA_LED);
 8003264:	4d0d      	ldr	r5, [pc, #52]	; (800329c <turret_init+0xcc>)
 8003266:	68eb      	ldr	r3, [r5, #12]
          chThdSleepMilliseconds(100);
 8003268:	20c8      	movs	r0, #200	; 0xc8
          palTogglePad(GPIOA, GPIOA_LED);
 800326a:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 800326e:	60eb      	str	r3, [r5, #12]
          chThdSleepMilliseconds(100);
 8003270:	f7ff fb06 	bl	8002880 <chThdSleep>
  while (iii < 15)
 8003274:	3c01      	subs	r4, #1
 8003276:	d1f6      	bne.n	8003266 <turret_init+0x96>
      }

  float turret_init_angle;
  turret_init_angle = encoder->radian_angle;  //initial with the stop point
  return turret_init_angle;
};
 8003278:	f8da 0010 	ldr.w	r0, [sl, #16]
 800327c:	b003      	add	sp, #12
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	f3af 8000 	nop.w
 8003288:	9999999a 	.word	0x9999999a
 800328c:	3fb99999 	.word	0x3fb99999
 8003290:	9999999a 	.word	0x9999999a
 8003294:	bfb99999 	.word	0xbfb99999
 8003298:	fffffdda 	.word	0xfffffdda
 800329c:	40010800 	.word	0x40010800
 80032a0:	fffffed4 	.word	0xfffffed4
	...

080032b0 <turret_output>:



float turret_output(PID_t* pid_angle, PID_t* pid_speed,
                    int* beaten, int* last_angle_sp, float init_angle)
{
 80032b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b4:	4691      	mov	r9, r2
 80032b6:	460e      	mov	r6, r1
 80032b8:	4698      	mov	r8, r3
 80032ba:	4604      	mov	r4, r0
  Encoder_canStruct* encoder = can_getEncoder();
 80032bc:	f7ff fea0 	bl	8003000 <can_getEncoder>
 80032c0:	4607      	mov	r7, r0
  RC_Ctl_t* rc;
  rc = RC_get();
 80032c2:	f7ff fdcd 	bl	8002e60 <RC_get>
  switch(target)
 80032c6:	7a42      	ldrb	r2, [r0, #9]
 80032c8:	3a01      	subs	r2, #1
 80032ca:	2a02      	cmp	r2, #2
 80032cc:	d847      	bhi.n	800335e <turret_output+0xae>
 80032ce:	4b32      	ldr	r3, [pc, #200]	; (8003398 <turret_output+0xe8>)
 80032d0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80032d4:	4628      	mov	r0, r5
 80032d6:	f7fd fcff 	bl	8000cd8 <__aeabi_i2f>
 80032da:	4601      	mov	r1, r0
  if (motor_angle_sp != *last_angle_sp)//once it sensed the change of the state
 80032dc:	f8d8 3000 	ldr.w	r3, [r8]
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	d004      	beq.n	80032ee <turret_output+0x3e>
    *beaten = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c9 3000 	str.w	r3, [r9]
    *last_angle_sp = motor_angle_sp;
 80032ea:	f8c8 5000 	str.w	r5, [r8]

  int angle_sp, speed_sp;
  float output;

  angle_sp = get_angle_sp(rc->s2,beaten,last_angle_sp);  //will be changed
  pid_update(pid_angle, angle_sp + init_angle, encoder->radian_angle);
 80032ee:	9808      	ldr	r0, [sp, #32]
 80032f0:	f7fd fc3e 	bl	8000b70 <__addsf3>
 80032f4:	693d      	ldr	r5, [r7, #16]
 80032f6:	4601      	mov	r1, r0
 80032f8:	462a      	mov	r2, r5
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff ff18 	bl	8003130 <pid_update>

  if (pid_angle->error_now < 5.0 &&
 8003300:	69e5      	ldr	r5, [r4, #28]
 8003302:	4926      	ldr	r1, [pc, #152]	; (800339c <turret_output+0xec>)
 8003304:	4628      	mov	r0, r5
 8003306:	f7fd fed9 	bl	80010bc <__aeabi_fcmplt>
 800330a:	b138      	cbz	r0, 800331c <turret_output+0x6c>
 800330c:	4628      	mov	r0, r5
 800330e:	4924      	ldr	r1, [pc, #144]	; (80033a0 <turret_output+0xf0>)
 8003310:	f7fd fef2 	bl	80010f8 <__aeabi_fcmpgt>
 8003314:	b110      	cbz	r0, 800331c <turret_output+0x6c>
  if(*beaten == 0)
 8003316:	f8d9 3000 	ldr.w	r3, [r9]
 800331a:	b31b      	cbz	r3, 8003364 <turret_output+0xb4>
  {
    hit(beaten);
  };

  speed_sp = (pid_angle->out / pid_angle->dt) * 6000.0 / 6.28318f;
  pid_update(pid_speed, speed_sp, encoder->speed_rpm);
 800331c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8003320:	f7fd fcda 	bl	8000cd8 <__aeabi_i2f>
  speed_sp = (pid_angle->out / pid_angle->dt) * 6000.0 / 6.28318f;
 8003324:	68e1      	ldr	r1, [r4, #12]
  pid_update(pid_speed, speed_sp, encoder->speed_rpm);
 8003326:	4605      	mov	r5, r0
  speed_sp = (pid_angle->out / pid_angle->dt) * 6000.0 / 6.28318f;
 8003328:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800332a:	f7fd fddd 	bl	8000ee8 <__aeabi_fdiv>
 800332e:	f7fd f8ff 	bl	8000530 <__aeabi_f2d>
 8003332:	a315      	add	r3, pc, #84	; (adr r3, 8003388 <turret_output+0xd8>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd f952 	bl	80005e0 <__aeabi_dmul>
 800333c:	a314      	add	r3, pc, #80	; (adr r3, 8003390 <turret_output+0xe0>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f7fd fa77 	bl	8000834 <__aeabi_ddiv>
 8003346:	f7fd fbe5 	bl	8000b14 <__aeabi_d2iz>
  pid_update(pid_speed, speed_sp, encoder->speed_rpm);
 800334a:	f7fd fcc5 	bl	8000cd8 <__aeabi_i2f>
 800334e:	462a      	mov	r2, r5
 8003350:	4601      	mov	r1, r0
 8003352:	4630      	mov	r0, r6
 8003354:	f7ff feec 	bl	8003130 <pid_update>

  output = pid_speed->out;
  return output;
}
 8003358:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800335a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  switch(target)
 800335e:	250a      	movs	r5, #10
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <turret_output+0xf4>)
 8003362:	e7bb      	b.n	80032dc <turret_output+0x2c>
    palSetPad(GPIOA,2);
 8003364:	f04f 0804 	mov.w	r8, #4
 8003368:	4d0f      	ldr	r5, [pc, #60]	; (80033a8 <turret_output+0xf8>)
    chThdSleepMilliseconds(800);
 800336a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    palSetPad(GPIOA,2);
 800336e:	f8c5 8010 	str.w	r8, [r5, #16]
    chThdSleepMilliseconds(800);
 8003372:	f7ff fa85 	bl	8002880 <chThdSleep>
    *beaten = 1;
 8003376:	2301      	movs	r3, #1
    palClearPad(GPIOA,2);
 8003378:	f8c5 8014 	str.w	r8, [r5, #20]
    *beaten = 1;
 800337c:	f8c9 3000 	str.w	r3, [r9]
 8003380:	e7cc      	b.n	800331c <turret_output+0x6c>
 8003382:	bf00      	nop
 8003384:	f3af 8000 	nop.w
 8003388:	00000000 	.word	0x00000000
 800338c:	40b77000 	.word	0x40b77000
 8003390:	00000000 	.word	0x00000000
 8003394:	401921fa 	.word	0x401921fa
 8003398:	080035e4 	.word	0x080035e4
 800339c:	40a00000 	.word	0x40a00000
 80033a0:	c0a00000 	.word	0xc0a00000
 80033a4:	41200000 	.word	0x41200000
 80033a8:	40010800 	.word	0x40010800

080033ac <memset>:
 80033ac:	b4f0      	push	{r4, r5, r6, r7}
 80033ae:	0786      	lsls	r6, r0, #30
 80033b0:	d043      	beq.n	800343a <memset+0x8e>
 80033b2:	1e54      	subs	r4, r2, #1
 80033b4:	2a00      	cmp	r2, #0
 80033b6:	d03e      	beq.n	8003436 <memset+0x8a>
 80033b8:	b2ca      	uxtb	r2, r1
 80033ba:	4603      	mov	r3, r0
 80033bc:	e002      	b.n	80033c4 <memset+0x18>
 80033be:	f114 34ff 	adds.w	r4, r4, #4294967295
 80033c2:	d338      	bcc.n	8003436 <memset+0x8a>
 80033c4:	f803 2b01 	strb.w	r2, [r3], #1
 80033c8:	079d      	lsls	r5, r3, #30
 80033ca:	d1f8      	bne.n	80033be <memset+0x12>
 80033cc:	2c03      	cmp	r4, #3
 80033ce:	d92b      	bls.n	8003428 <memset+0x7c>
 80033d0:	b2cd      	uxtb	r5, r1
 80033d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80033d6:	2c0f      	cmp	r4, #15
 80033d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80033dc:	d916      	bls.n	800340c <memset+0x60>
 80033de:	f1a4 0710 	sub.w	r7, r4, #16
 80033e2:	093f      	lsrs	r7, r7, #4
 80033e4:	f103 0620 	add.w	r6, r3, #32
 80033e8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80033ec:	f103 0210 	add.w	r2, r3, #16
 80033f0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80033f4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80033f8:	3210      	adds	r2, #16
 80033fa:	42b2      	cmp	r2, r6
 80033fc:	d1f8      	bne.n	80033f0 <memset+0x44>
 80033fe:	f004 040f 	and.w	r4, r4, #15
 8003402:	3701      	adds	r7, #1
 8003404:	2c03      	cmp	r4, #3
 8003406:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800340a:	d90d      	bls.n	8003428 <memset+0x7c>
 800340c:	461e      	mov	r6, r3
 800340e:	4622      	mov	r2, r4
 8003410:	3a04      	subs	r2, #4
 8003412:	2a03      	cmp	r2, #3
 8003414:	f846 5b04 	str.w	r5, [r6], #4
 8003418:	d8fa      	bhi.n	8003410 <memset+0x64>
 800341a:	1f22      	subs	r2, r4, #4
 800341c:	f022 0203 	bic.w	r2, r2, #3
 8003420:	3204      	adds	r2, #4
 8003422:	4413      	add	r3, r2
 8003424:	f004 0403 	and.w	r4, r4, #3
 8003428:	b12c      	cbz	r4, 8003436 <memset+0x8a>
 800342a:	b2c9      	uxtb	r1, r1
 800342c:	441c      	add	r4, r3
 800342e:	f803 1b01 	strb.w	r1, [r3], #1
 8003432:	429c      	cmp	r4, r3
 8003434:	d1fb      	bne.n	800342e <memset+0x82>
 8003436:	bcf0      	pop	{r4, r5, r6, r7}
 8003438:	4770      	bx	lr
 800343a:	4614      	mov	r4, r2
 800343c:	4603      	mov	r3, r0
 800343e:	e7c5      	b.n	80033cc <memset+0x20>
